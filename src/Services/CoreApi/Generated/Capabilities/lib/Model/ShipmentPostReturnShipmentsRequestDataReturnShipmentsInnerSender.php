<?php
/**
 * ShipmentPostReturnShipmentsRequestDataReturnShipmentsInnerSender
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MyParcel\CoreApi\Generated\Capabilities
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * MyParcel API
 *
 * Allows MyParcel users to query delivery options, pickup & drop off locations with opening hours, register & trace shipments, print labels and more.
 *
 * The version of the OpenAPI document: 2025-02-13
 * Contact: info@myparcel.nl
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.15.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MyParcel\CoreApi\Generated\Capabilities\Model;

use \ArrayAccess;
use \MyParcel\CoreApi\Generated\Capabilities\ObjectSerializer;

/**
 * ShipmentPostReturnShipmentsRequestDataReturnShipmentsInnerSender Class Doc Comment
 *
 * @category Class
 * @package  MyParcel\CoreApi\Generated\Capabilities
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ShipmentPostReturnShipmentsRequestDataReturnShipmentsInnerSender implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'shipment_post_return_shipments_request_data_return_shipments_inner_sender';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'cc' => 'string',
        'postal_code' => 'string',
        'city' => 'string',
        'street' => 'string',
        'street_additional_info' => 'string',
        'number' => 'string',
        'number_suffix' => 'string',
        'box_number' => 'string',
        'region' => 'string',
        'person' => 'string',
        'company' => 'string',
        'email' => '\MyParcel\CoreApi\Generated\Capabilities\Model\ShipmentPostReturnShipmentsRequestDataReturnShipmentsInnerSenderEmail',
        'phone' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'cc' => null,
        'postal_code' => null,
        'city' => null,
        'street' => null,
        'street_additional_info' => null,
        'number' => null,
        'number_suffix' => null,
        'box_number' => null,
        'region' => null,
        'person' => null,
        'company' => null,
        'email' => null,
        'phone' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'cc' => false,
        'postal_code' => false,
        'city' => false,
        'street' => false,
        'street_additional_info' => false,
        'number' => false,
        'number_suffix' => false,
        'box_number' => false,
        'region' => false,
        'person' => false,
        'company' => false,
        'email' => false,
        'phone' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cc' => 'cc',
        'postal_code' => 'postal_code',
        'city' => 'city',
        'street' => 'street',
        'street_additional_info' => 'street_additional_info',
        'number' => 'number',
        'number_suffix' => 'number_suffix',
        'box_number' => 'box_number',
        'region' => 'region',
        'person' => 'person',
        'company' => 'company',
        'email' => 'email',
        'phone' => 'phone'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cc' => 'setCc',
        'postal_code' => 'setPostalCode',
        'city' => 'setCity',
        'street' => 'setStreet',
        'street_additional_info' => 'setStreetAdditionalInfo',
        'number' => 'setNumber',
        'number_suffix' => 'setNumberSuffix',
        'box_number' => 'setBoxNumber',
        'region' => 'setRegion',
        'person' => 'setPerson',
        'company' => 'setCompany',
        'email' => 'setEmail',
        'phone' => 'setPhone'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cc' => 'getCc',
        'postal_code' => 'getPostalCode',
        'city' => 'getCity',
        'street' => 'getStreet',
        'street_additional_info' => 'getStreetAdditionalInfo',
        'number' => 'getNumber',
        'number_suffix' => 'getNumberSuffix',
        'box_number' => 'getBoxNumber',
        'region' => 'getRegion',
        'person' => 'getPerson',
        'company' => 'getCompany',
        'email' => 'getEmail',
        'phone' => 'getPhone'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('cc', $data ?? [], null);
        $this->setIfExists('postal_code', $data ?? [], null);
        $this->setIfExists('city', $data ?? [], null);
        $this->setIfExists('street', $data ?? [], null);
        $this->setIfExists('street_additional_info', $data ?? [], null);
        $this->setIfExists('number', $data ?? [], null);
        $this->setIfExists('number_suffix', $data ?? [], null);
        $this->setIfExists('box_number', $data ?? [], null);
        $this->setIfExists('region', $data ?? [], null);
        $this->setIfExists('person', $data ?? [], null);
        $this->setIfExists('company', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('phone', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['cc'] === null) {
            $invalidProperties[] = "'cc' can't be null";
        }
        if ((mb_strlen($this->container['cc']) > 2)) {
            $invalidProperties[] = "invalid value for 'cc', the character length must be smaller than or equal to 2.";
        }

        if ((mb_strlen($this->container['cc']) < 2)) {
            $invalidProperties[] = "invalid value for 'cc', the character length must be bigger than or equal to 2.";
        }

        if ($this->container['city'] === null) {
            $invalidProperties[] = "'city' can't be null";
        }
        if ($this->container['street'] === null) {
            $invalidProperties[] = "'street' can't be null";
        }
        if (!is_null($this->container['box_number']) && (mb_strlen($this->container['box_number']) > 8)) {
            $invalidProperties[] = "invalid value for 'box_number', the character length must be smaller than or equal to 8.";
        }

        if (!is_null($this->container['region']) && (mb_strlen($this->container['region']) > 35)) {
            $invalidProperties[] = "invalid value for 'region', the character length must be smaller than or equal to 35.";
        }

        if ($this->container['person'] === null) {
            $invalidProperties[] = "'person' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cc
     *
     * @return string
     */
    public function getCc()
    {
        return $this->container['cc'];
    }

    /**
     * Sets cc
     *
     * @param string $cc cc
     *
     * @return self
     */
    public function setCc($cc)
    {
        if (is_null($cc)) {
            throw new \InvalidArgumentException('non-nullable cc cannot be null');
        }
        if ((mb_strlen($cc) > 2)) {
            throw new \InvalidArgumentException('invalid length for $cc when calling ShipmentPostReturnShipmentsRequestDataReturnShipmentsInnerSender., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($cc) < 2)) {
            throw new \InvalidArgumentException('invalid length for $cc when calling ShipmentPostReturnShipmentsRequestDataReturnShipmentsInnerSender., must be bigger than or equal to 2.');
        }

        $this->container['cc'] = $cc;

        return $this;
    }

    /**
     * Gets postal_code
     *
     * @return string|null
     */
    public function getPostalCode()
    {
        return $this->container['postal_code'];
    }

    /**
     * Sets postal_code
     *
     * @param string|null $postal_code postal_code
     *
     * @return self
     */
    public function setPostalCode($postal_code)
    {
        if (is_null($postal_code)) {
            throw new \InvalidArgumentException('non-nullable postal_code cannot be null');
        }
        $this->container['postal_code'] = $postal_code;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string $city city
     *
     * @return self
     */
    public function setCity($city)
    {
        if (is_null($city)) {
            throw new \InvalidArgumentException('non-nullable city cannot be null');
        }
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets street
     *
     * @return string
     */
    public function getStreet()
    {
        return $this->container['street'];
    }

    /**
     * Sets street
     *
     * @param string $street street
     *
     * @return self
     */
    public function setStreet($street)
    {
        if (is_null($street)) {
            throw new \InvalidArgumentException('non-nullable street cannot be null');
        }
        $this->container['street'] = $street;

        return $this;
    }

    /**
     * Gets street_additional_info
     *
     * @return string|null
     */
    public function getStreetAdditionalInfo()
    {
        return $this->container['street_additional_info'];
    }

    /**
     * Sets street_additional_info
     *
     * @param string|null $street_additional_info street_additional_info
     *
     * @return self
     */
    public function setStreetAdditionalInfo($street_additional_info)
    {
        if (is_null($street_additional_info)) {
            throw new \InvalidArgumentException('non-nullable street_additional_info cannot be null');
        }
        $this->container['street_additional_info'] = $street_additional_info;

        return $this;
    }

    /**
     * Gets number
     *
     * @return string|null
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param string|null $number number
     *
     * @return self
     */
    public function setNumber($number)
    {
        if (is_null($number)) {
            throw new \InvalidArgumentException('non-nullable number cannot be null');
        }
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets number_suffix
     *
     * @return string|null
     */
    public function getNumberSuffix()
    {
        return $this->container['number_suffix'];
    }

    /**
     * Sets number_suffix
     *
     * @param string|null $number_suffix number_suffix
     *
     * @return self
     */
    public function setNumberSuffix($number_suffix)
    {
        if (is_null($number_suffix)) {
            throw new \InvalidArgumentException('non-nullable number_suffix cannot be null');
        }
        $this->container['number_suffix'] = $number_suffix;

        return $this;
    }

    /**
     * Gets box_number
     *
     * @return string|null
     */
    public function getBoxNumber()
    {
        return $this->container['box_number'];
    }

    /**
     * Sets box_number
     *
     * @param string|null $box_number box_number
     *
     * @return self
     */
    public function setBoxNumber($box_number)
    {
        if (is_null($box_number)) {
            throw new \InvalidArgumentException('non-nullable box_number cannot be null');
        }
        if ((mb_strlen($box_number) > 8)) {
            throw new \InvalidArgumentException('invalid length for $box_number when calling ShipmentPostReturnShipmentsRequestDataReturnShipmentsInnerSender., must be smaller than or equal to 8.');
        }

        $this->container['box_number'] = $box_number;

        return $this;
    }

    /**
     * Gets region
     *
     * @return string|null
     */
    public function getRegion()
    {
        return $this->container['region'];
    }

    /**
     * Sets region
     *
     * @param string|null $region region
     *
     * @return self
     */
    public function setRegion($region)
    {
        if (is_null($region)) {
            throw new \InvalidArgumentException('non-nullable region cannot be null');
        }
        if ((mb_strlen($region) > 35)) {
            throw new \InvalidArgumentException('invalid length for $region when calling ShipmentPostReturnShipmentsRequestDataReturnShipmentsInnerSender., must be smaller than or equal to 35.');
        }

        $this->container['region'] = $region;

        return $this;
    }

    /**
     * Gets person
     *
     * @return string
     */
    public function getPerson()
    {
        return $this->container['person'];
    }

    /**
     * Sets person
     *
     * @param string $person person
     *
     * @return self
     */
    public function setPerson($person)
    {
        if (is_null($person)) {
            throw new \InvalidArgumentException('non-nullable person cannot be null');
        }
        $this->container['person'] = $person;

        return $this;
    }

    /**
     * Gets company
     *
     * @return string|null
     */
    public function getCompany()
    {
        return $this->container['company'];
    }

    /**
     * Sets company
     *
     * @param string|null $company company
     *
     * @return self
     */
    public function setCompany($company)
    {
        if (is_null($company)) {
            throw new \InvalidArgumentException('non-nullable company cannot be null');
        }
        $this->container['company'] = $company;

        return $this;
    }

    /**
     * Gets email
     *
     * @return \MyParcel\CoreApi\Generated\Capabilities\Model\ShipmentPostReturnShipmentsRequestDataReturnShipmentsInnerSenderEmail|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param \MyParcel\CoreApi\Generated\Capabilities\Model\ShipmentPostReturnShipmentsRequestDataReturnShipmentsInnerSenderEmail|null $email email
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string|null
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string|null $phone phone
     *
     * @return self
     */
    public function setPhone($phone)
    {
        if (is_null($phone)) {
            throw new \InvalidArgumentException('non-nullable phone cannot be null');
        }
        $this->container['phone'] = $phone;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


