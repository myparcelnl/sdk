<?php
/**
 * CapabilitiesPostCapabilitiesRequestV2
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MyParcel\CoreApi\Generated\Capabilities
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * MyParcel API
 *
 * Allows MyParcel users to query delivery options, pickup & drop off locations with opening hours, register & trace shipments, print labels and more.
 *
 * The version of the OpenAPI document: 2025-02-13
 * Contact: info@myparcel.nl
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.15.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MyParcel\CoreApi\Generated\Capabilities\Model;

use \ArrayAccess;
use \MyParcel\CoreApi\Generated\Capabilities\ObjectSerializer;

/**
 * CapabilitiesPostCapabilitiesRequestV2 Class Doc Comment
 *
 * @category Class
 * @package  MyParcel\CoreApi\Generated\Capabilities
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CapabilitiesPostCapabilitiesRequestV2 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'capabilities_post_capabilities_request-v2';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'shop_id' => 'int',
        'recipient' => '\MyParcel\CoreApi\Generated\Capabilities\Model\CapabilitiesPostCapabilitiesRequestV2Recipient',
        'sender' => '\MyParcel\CoreApi\Generated\Capabilities\Model\CapabilitiesPostCapabilitiesRequestV2Sender',
        'carrier' => '\MyParcel\CoreApi\Generated\Capabilities\Model\RefTypesCarrierV2',
        'package_type' => 'string',
        'physical_properties' => '\MyParcel\CoreApi\Generated\Capabilities\Model\CapabilitiesPostCapabilitiesRequestV2PhysicalProperties',
        'options' => '\MyParcel\CoreApi\Generated\Capabilities\Model\CapabilitiesPostCapabilitiesRequestV2Options',
        'delivery_type' => 'string',
        'direction' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'shop_id' => null,
        'recipient' => null,
        'sender' => null,
        'carrier' => null,
        'package_type' => null,
        'physical_properties' => null,
        'options' => null,
        'delivery_type' => null,
        'direction' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'shop_id' => false,
        'recipient' => false,
        'sender' => false,
        'carrier' => false,
        'package_type' => false,
        'physical_properties' => false,
        'options' => false,
        'delivery_type' => false,
        'direction' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'shop_id' => 'shopId',
        'recipient' => 'recipient',
        'sender' => 'sender',
        'carrier' => 'carrier',
        'package_type' => 'packageType',
        'physical_properties' => 'physicalProperties',
        'options' => 'options',
        'delivery_type' => 'deliveryType',
        'direction' => 'direction'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'shop_id' => 'setShopId',
        'recipient' => 'setRecipient',
        'sender' => 'setSender',
        'carrier' => 'setCarrier',
        'package_type' => 'setPackageType',
        'physical_properties' => 'setPhysicalProperties',
        'options' => 'setOptions',
        'delivery_type' => 'setDeliveryType',
        'direction' => 'setDirection'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'shop_id' => 'getShopId',
        'recipient' => 'getRecipient',
        'sender' => 'getSender',
        'carrier' => 'getCarrier',
        'package_type' => 'getPackageType',
        'physical_properties' => 'getPhysicalProperties',
        'options' => 'getOptions',
        'delivery_type' => 'getDeliveryType',
        'direction' => 'getDirection'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const PACKAGE_TYPE_DIGITAL_STAMP = 'DIGITAL_STAMP';
    public const PACKAGE_TYPE_LETTER = 'LETTER';
    public const PACKAGE_TYPE_MAILBOX = 'MAILBOX';
    public const PACKAGE_TYPE_PACKAGE = 'PACKAGE';
    public const PACKAGE_TYPE_PALLET = 'PALLET';
    public const PACKAGE_TYPE_SMALL_PACKAGE = 'SMALL_PACKAGE';
    public const DELIVERY_TYPE_EVENING_DELIVERY = 'EVENING_DELIVERY';
    public const DELIVERY_TYPE_EXPRESS_DELIVERY = 'EXPRESS_DELIVERY';
    public const DELIVERY_TYPE_MORNING_DELIVERY = 'MORNING_DELIVERY';
    public const DELIVERY_TYPE_PICKUP_DELIVERY = 'PICKUP_DELIVERY';
    public const DELIVERY_TYPE_SAME_DAY_DELIVERY = 'SAME_DAY_DELIVERY';
    public const DELIVERY_TYPE_STANDARD_DELIVERY = 'STANDARD_DELIVERY';
    public const DIRECTION_INBOUND = 'INBOUND';
    public const DIRECTION_OUTBOUND = 'OUTBOUND';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPackageTypeAllowableValues()
    {
        return [
            self::PACKAGE_TYPE_DIGITAL_STAMP,
            self::PACKAGE_TYPE_LETTER,
            self::PACKAGE_TYPE_MAILBOX,
            self::PACKAGE_TYPE_PACKAGE,
            self::PACKAGE_TYPE_PALLET,
            self::PACKAGE_TYPE_SMALL_PACKAGE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDeliveryTypeAllowableValues()
    {
        return [
            self::DELIVERY_TYPE_EVENING_DELIVERY,
            self::DELIVERY_TYPE_EXPRESS_DELIVERY,
            self::DELIVERY_TYPE_MORNING_DELIVERY,
            self::DELIVERY_TYPE_PICKUP_DELIVERY,
            self::DELIVERY_TYPE_SAME_DAY_DELIVERY,
            self::DELIVERY_TYPE_STANDARD_DELIVERY,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDirectionAllowableValues()
    {
        return [
            self::DIRECTION_INBOUND,
            self::DIRECTION_OUTBOUND,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('shop_id', $data ?? [], null);
        $this->setIfExists('recipient', $data ?? [], null);
        $this->setIfExists('sender', $data ?? [], null);
        $this->setIfExists('carrier', $data ?? [], null);
        $this->setIfExists('package_type', $data ?? [], null);
        $this->setIfExists('physical_properties', $data ?? [], null);
        $this->setIfExists('options', $data ?? [], null);
        $this->setIfExists('delivery_type', $data ?? [], null);
        $this->setIfExists('direction', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['recipient'] === null) {
            $invalidProperties[] = "'recipient' can't be null";
        }
        $allowedValues = $this->getPackageTypeAllowableValues();
        if (!is_null($this->container['package_type']) && !in_array($this->container['package_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'package_type', must be one of '%s'",
                $this->container['package_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDeliveryTypeAllowableValues();
        if (!is_null($this->container['delivery_type']) && !in_array($this->container['delivery_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'delivery_type', must be one of '%s'",
                $this->container['delivery_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDirectionAllowableValues();
        if (!is_null($this->container['direction']) && !in_array($this->container['direction'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'direction', must be one of '%s'",
                $this->container['direction'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets shop_id
     *
     * @return int|null
     */
    public function getShopId()
    {
        return $this->container['shop_id'];
    }

    /**
     * Sets shop_id
     *
     * @param int|null $shop_id The ID of the shop for which the capabilities are requested.
     *
     * @return self
     */
    public function setShopId($shop_id)
    {
        if (is_null($shop_id)) {
            throw new \InvalidArgumentException('non-nullable shop_id cannot be null');
        }
        $this->container['shop_id'] = $shop_id;

        return $this;
    }

    /**
     * Gets recipient
     *
     * @return \MyParcel\CoreApi\Generated\Capabilities\Model\CapabilitiesPostCapabilitiesRequestV2Recipient
     */
    public function getRecipient()
    {
        return $this->container['recipient'];
    }

    /**
     * Sets recipient
     *
     * @param \MyParcel\CoreApi\Generated\Capabilities\Model\CapabilitiesPostCapabilitiesRequestV2Recipient $recipient recipient
     *
     * @return self
     */
    public function setRecipient($recipient)
    {
        if (is_null($recipient)) {
            throw new \InvalidArgumentException('non-nullable recipient cannot be null');
        }
        $this->container['recipient'] = $recipient;

        return $this;
    }

    /**
     * Gets sender
     *
     * @return \MyParcel\CoreApi\Generated\Capabilities\Model\CapabilitiesPostCapabilitiesRequestV2Sender|null
     */
    public function getSender()
    {
        return $this->container['sender'];
    }

    /**
     * Sets sender
     *
     * @param \MyParcel\CoreApi\Generated\Capabilities\Model\CapabilitiesPostCapabilitiesRequestV2Sender|null $sender sender
     *
     * @return self
     */
    public function setSender($sender)
    {
        if (is_null($sender)) {
            throw new \InvalidArgumentException('non-nullable sender cannot be null');
        }
        $this->container['sender'] = $sender;

        return $this;
    }

    /**
     * Gets carrier
     *
     * @return \MyParcel\CoreApi\Generated\Capabilities\Model\RefTypesCarrierV2|null
     */
    public function getCarrier()
    {
        return $this->container['carrier'];
    }

    /**
     * Sets carrier
     *
     * @param \MyParcel\CoreApi\Generated\Capabilities\Model\RefTypesCarrierV2|null $carrier carrier
     *
     * @return self
     */
    public function setCarrier($carrier)
    {
        if (is_null($carrier)) {
            throw new \InvalidArgumentException('non-nullable carrier cannot be null');
        }
        $this->container['carrier'] = $carrier;

        return $this;
    }

    /**
     * Gets package_type
     *
     * @return string|null
     */
    public function getPackageType()
    {
        return $this->container['package_type'];
    }

    /**
     * Sets package_type
     *
     * @param string|null $package_type package_type
     *
     * @return self
     */
    public function setPackageType($package_type)
    {
        if (is_null($package_type)) {
            throw new \InvalidArgumentException('non-nullable package_type cannot be null');
        }
        $allowedValues = $this->getPackageTypeAllowableValues();
        if (!in_array($package_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'package_type', must be one of '%s'",
                    $package_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['package_type'] = $package_type;

        return $this;
    }

    /**
     * Gets physical_properties
     *
     * @return \MyParcel\CoreApi\Generated\Capabilities\Model\CapabilitiesPostCapabilitiesRequestV2PhysicalProperties|null
     */
    public function getPhysicalProperties()
    {
        return $this->container['physical_properties'];
    }

    /**
     * Sets physical_properties
     *
     * @param \MyParcel\CoreApi\Generated\Capabilities\Model\CapabilitiesPostCapabilitiesRequestV2PhysicalProperties|null $physical_properties physical_properties
     *
     * @return self
     */
    public function setPhysicalProperties($physical_properties)
    {
        if (is_null($physical_properties)) {
            throw new \InvalidArgumentException('non-nullable physical_properties cannot be null');
        }
        $this->container['physical_properties'] = $physical_properties;

        return $this;
    }

    /**
     * Gets options
     *
     * @return \MyParcel\CoreApi\Generated\Capabilities\Model\CapabilitiesPostCapabilitiesRequestV2Options|null
     */
    public function getOptions()
    {
        return $this->container['options'];
    }

    /**
     * Sets options
     *
     * @param \MyParcel\CoreApi\Generated\Capabilities\Model\CapabilitiesPostCapabilitiesRequestV2Options|null $options options
     *
     * @return self
     */
    public function setOptions($options)
    {
        if (is_null($options)) {
            throw new \InvalidArgumentException('non-nullable options cannot be null');
        }
        $this->container['options'] = $options;

        return $this;
    }

    /**
     * Gets delivery_type
     *
     * @return string|null
     */
    public function getDeliveryType()
    {
        return $this->container['delivery_type'];
    }

    /**
     * Sets delivery_type
     *
     * @param string|null $delivery_type delivery_type
     *
     * @return self
     */
    public function setDeliveryType($delivery_type)
    {
        if (is_null($delivery_type)) {
            throw new \InvalidArgumentException('non-nullable delivery_type cannot be null');
        }
        $allowedValues = $this->getDeliveryTypeAllowableValues();
        if (!in_array($delivery_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'delivery_type', must be one of '%s'",
                    $delivery_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['delivery_type'] = $delivery_type;

        return $this;
    }

    /**
     * Gets direction
     *
     * @return string|null
     */
    public function getDirection()
    {
        return $this->container['direction'];
    }

    /**
     * Sets direction
     *
     * @param string|null $direction The shipment direction for which the capabilities are requested.
     *
     * @return self
     */
    public function setDirection($direction)
    {
        if (is_null($direction)) {
            throw new \InvalidArgumentException('non-nullable direction cannot be null');
        }
        $allowedValues = $this->getDirectionAllowableValues();
        if (!in_array($direction, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'direction', must be one of '%s'",
                    $direction,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['direction'] = $direction;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


