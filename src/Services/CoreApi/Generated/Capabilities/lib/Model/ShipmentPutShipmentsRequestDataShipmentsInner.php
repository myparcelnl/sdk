<?php
/**
 * ShipmentPutShipmentsRequestDataShipmentsInner
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MyParcel\CoreApi\Generated\Capabilities
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * MyParcel API
 *
 * Allows MyParcel users to query delivery options, pickup & drop off locations with opening hours, register & trace shipments, print labels and more.
 *
 * The version of the OpenAPI document: 2025-02-13
 * Contact: info@myparcel.nl
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.15.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MyParcel\CoreApi\Generated\Capabilities\Model;

use \ArrayAccess;
use \MyParcel\CoreApi\Generated\Capabilities\ObjectSerializer;

/**
 * ShipmentPutShipmentsRequestDataShipmentsInner Class Doc Comment
 *
 * @category Class
 * @package  MyParcel\CoreApi\Generated\Capabilities
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ShipmentPutShipmentsRequestDataShipmentsInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'shipment_put_shipments_request_data_shipments_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'account_id' => 'int',
        'shop_id' => 'int',
        'reference_identifier' => 'int',
        'carrier' => '\MyParcel\CoreApi\Generated\Capabilities\Model\RefTypesCarrier',
        'status' => 'int',
        'delivered' => 'int',
        'recipient' => '\MyParcel\CoreApi\Generated\Capabilities\Model\ShipmentPutShipmentsRequestDataShipmentsInnerRecipient',
        'sender' => '\MyParcel\CoreApi\Generated\Capabilities\Model\RefShipmentSender',
        'options' => '\MyParcel\CoreApi\Generated\Capabilities\Model\RefShipmentShipmentOptions',
        'customs_declaration' => '\MyParcel\CoreApi\Generated\Capabilities\Model\RefShipmentCustomsDeclaration',
        'physical_properties' => '\MyParcel\CoreApi\Generated\Capabilities\Model\ShipmentPostShipmentsRequestV11DataShipmentsInnerPhysicalProperties',
        'pickup' => '\MyParcel\CoreApi\Generated\Capabilities\Model\RefShipmentPickup',
        'note' => 'string',
        'general_settings' => '\MyParcel\CoreApi\Generated\Capabilities\Model\ShipmentPostShipmentsRequestV11DataShipmentsInnerGeneralSettings',
        'hidden' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'account_id' => null,
        'shop_id' => null,
        'reference_identifier' => null,
        'carrier' => null,
        'status' => null,
        'delivered' => null,
        'recipient' => null,
        'sender' => null,
        'options' => null,
        'customs_declaration' => null,
        'physical_properties' => null,
        'pickup' => null,
        'note' => null,
        'general_settings' => null,
        'hidden' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'account_id' => false,
        'shop_id' => false,
        'reference_identifier' => false,
        'carrier' => false,
        'status' => false,
        'delivered' => false,
        'recipient' => false,
        'sender' => false,
        'options' => false,
        'customs_declaration' => false,
        'physical_properties' => false,
        'pickup' => false,
        'note' => false,
        'general_settings' => false,
        'hidden' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'account_id' => 'account_id',
        'shop_id' => 'shop_id',
        'reference_identifier' => 'reference_identifier',
        'carrier' => 'carrier',
        'status' => 'status',
        'delivered' => 'delivered',
        'recipient' => 'recipient',
        'sender' => 'sender',
        'options' => 'options',
        'customs_declaration' => 'customs_declaration',
        'physical_properties' => 'physical_properties',
        'pickup' => 'pickup',
        'note' => 'note',
        'general_settings' => 'general_settings',
        'hidden' => 'hidden'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'account_id' => 'setAccountId',
        'shop_id' => 'setShopId',
        'reference_identifier' => 'setReferenceIdentifier',
        'carrier' => 'setCarrier',
        'status' => 'setStatus',
        'delivered' => 'setDelivered',
        'recipient' => 'setRecipient',
        'sender' => 'setSender',
        'options' => 'setOptions',
        'customs_declaration' => 'setCustomsDeclaration',
        'physical_properties' => 'setPhysicalProperties',
        'pickup' => 'setPickup',
        'note' => 'setNote',
        'general_settings' => 'setGeneralSettings',
        'hidden' => 'setHidden'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'account_id' => 'getAccountId',
        'shop_id' => 'getShopId',
        'reference_identifier' => 'getReferenceIdentifier',
        'carrier' => 'getCarrier',
        'status' => 'getStatus',
        'delivered' => 'getDelivered',
        'recipient' => 'getRecipient',
        'sender' => 'getSender',
        'options' => 'getOptions',
        'customs_declaration' => 'getCustomsDeclaration',
        'physical_properties' => 'getPhysicalProperties',
        'pickup' => 'getPickup',
        'note' => 'getNote',
        'general_settings' => 'getGeneralSettings',
        'hidden' => 'getHidden'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const DELIVERED_NUMBER_0 = 0;
    public const DELIVERED_NUMBER_1 = 1;
    public const HIDDEN_NUMBER_0 = 0;
    public const HIDDEN_NUMBER_1 = 1;

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDeliveredAllowableValues()
    {
        return [
            self::DELIVERED_NUMBER_0,
            self::DELIVERED_NUMBER_1,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getHiddenAllowableValues()
    {
        return [
            self::HIDDEN_NUMBER_0,
            self::HIDDEN_NUMBER_1,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('account_id', $data ?? [], null);
        $this->setIfExists('shop_id', $data ?? [], null);
        $this->setIfExists('reference_identifier', $data ?? [], null);
        $this->setIfExists('carrier', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('delivered', $data ?? [], null);
        $this->setIfExists('recipient', $data ?? [], null);
        $this->setIfExists('sender', $data ?? [], null);
        $this->setIfExists('options', $data ?? [], null);
        $this->setIfExists('customs_declaration', $data ?? [], null);
        $this->setIfExists('physical_properties', $data ?? [], null);
        $this->setIfExists('pickup', $data ?? [], null);
        $this->setIfExists('note', $data ?? [], null);
        $this->setIfExists('general_settings', $data ?? [], null);
        $this->setIfExists('hidden', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['carrier'] === null) {
            $invalidProperties[] = "'carrier' can't be null";
        }
        $allowedValues = $this->getDeliveredAllowableValues();
        if (!is_null($this->container['delivered']) && !in_array($this->container['delivered'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'delivered', must be one of '%s'",
                $this->container['delivered'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['options'] === null) {
            $invalidProperties[] = "'options' can't be null";
        }
        $allowedValues = $this->getHiddenAllowableValues();
        if (!is_null($this->container['hidden']) && !in_array($this->container['hidden'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'hidden', must be one of '%s'",
                $this->container['hidden'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets account_id
     *
     * @return int|null
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param int|null $account_id account_id
     *
     * @return self
     */
    public function setAccountId($account_id)
    {
        if (is_null($account_id)) {
            throw new \InvalidArgumentException('non-nullable account_id cannot be null');
        }
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets shop_id
     *
     * @return int|null
     */
    public function getShopId()
    {
        return $this->container['shop_id'];
    }

    /**
     * Sets shop_id
     *
     * @param int|null $shop_id shop_id
     *
     * @return self
     */
    public function setShopId($shop_id)
    {
        if (is_null($shop_id)) {
            throw new \InvalidArgumentException('non-nullable shop_id cannot be null');
        }
        $this->container['shop_id'] = $shop_id;

        return $this;
    }

    /**
     * Gets reference_identifier
     *
     * @return int|null
     */
    public function getReferenceIdentifier()
    {
        return $this->container['reference_identifier'];
    }

    /**
     * Sets reference_identifier
     *
     * @param int|null $reference_identifier reference_identifier
     *
     * @return self
     */
    public function setReferenceIdentifier($reference_identifier)
    {
        if (is_null($reference_identifier)) {
            throw new \InvalidArgumentException('non-nullable reference_identifier cannot be null');
        }


        $this->container['reference_identifier'] = $reference_identifier;

        return $this;
    }

    /**
     * Gets carrier
     *
     * @return \MyParcel\CoreApi\Generated\Capabilities\Model\RefTypesCarrier
     */
    public function getCarrier()
    {
        return $this->container['carrier'];
    }

    /**
     * Sets carrier
     *
     * @param \MyParcel\CoreApi\Generated\Capabilities\Model\RefTypesCarrier $carrier carrier
     *
     * @return self
     */
    public function setCarrier($carrier)
    {
        if (is_null($carrier)) {
            throw new \InvalidArgumentException('non-nullable carrier cannot be null');
        }
        $this->container['carrier'] = $carrier;

        return $this;
    }

    /**
     * Gets status
     *
     * @return int|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param int|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets delivered
     *
     * @return int|null
     */
    public function getDelivered()
    {
        return $this->container['delivered'];
    }

    /**
     * Sets delivered
     *
     * @param int|null $delivered delivered
     *
     * @return self
     */
    public function setDelivered($delivered)
    {
        if (is_null($delivered)) {
            throw new \InvalidArgumentException('non-nullable delivered cannot be null');
        }
        $allowedValues = $this->getDeliveredAllowableValues();
        if (!in_array($delivered, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'delivered', must be one of '%s'",
                    $delivered,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['delivered'] = $delivered;

        return $this;
    }

    /**
     * Gets recipient
     *
     * @return \MyParcel\CoreApi\Generated\Capabilities\Model\ShipmentPutShipmentsRequestDataShipmentsInnerRecipient|null
     */
    public function getRecipient()
    {
        return $this->container['recipient'];
    }

    /**
     * Sets recipient
     *
     * @param \MyParcel\CoreApi\Generated\Capabilities\Model\ShipmentPutShipmentsRequestDataShipmentsInnerRecipient|null $recipient recipient
     *
     * @return self
     */
    public function setRecipient($recipient)
    {
        if (is_null($recipient)) {
            throw new \InvalidArgumentException('non-nullable recipient cannot be null');
        }
        $this->container['recipient'] = $recipient;

        return $this;
    }

    /**
     * Gets sender
     *
     * @return \MyParcel\CoreApi\Generated\Capabilities\Model\RefShipmentSender|null
     */
    public function getSender()
    {
        return $this->container['sender'];
    }

    /**
     * Sets sender
     *
     * @param \MyParcel\CoreApi\Generated\Capabilities\Model\RefShipmentSender|null $sender sender
     *
     * @return self
     */
    public function setSender($sender)
    {
        if (is_null($sender)) {
            throw new \InvalidArgumentException('non-nullable sender cannot be null');
        }
        $this->container['sender'] = $sender;

        return $this;
    }

    /**
     * Gets options
     *
     * @return \MyParcel\CoreApi\Generated\Capabilities\Model\RefShipmentShipmentOptions
     */
    public function getOptions()
    {
        return $this->container['options'];
    }

    /**
     * Sets options
     *
     * @param \MyParcel\CoreApi\Generated\Capabilities\Model\RefShipmentShipmentOptions $options options
     *
     * @return self
     */
    public function setOptions($options)
    {
        if (is_null($options)) {
            throw new \InvalidArgumentException('non-nullable options cannot be null');
        }
        $this->container['options'] = $options;

        return $this;
    }

    /**
     * Gets customs_declaration
     *
     * @return \MyParcel\CoreApi\Generated\Capabilities\Model\RefShipmentCustomsDeclaration|null
     */
    public function getCustomsDeclaration()
    {
        return $this->container['customs_declaration'];
    }

    /**
     * Sets customs_declaration
     *
     * @param \MyParcel\CoreApi\Generated\Capabilities\Model\RefShipmentCustomsDeclaration|null $customs_declaration customs_declaration
     *
     * @return self
     */
    public function setCustomsDeclaration($customs_declaration)
    {
        if (is_null($customs_declaration)) {
            throw new \InvalidArgumentException('non-nullable customs_declaration cannot be null');
        }
        $this->container['customs_declaration'] = $customs_declaration;

        return $this;
    }

    /**
     * Gets physical_properties
     *
     * @return \MyParcel\CoreApi\Generated\Capabilities\Model\ShipmentPostShipmentsRequestV11DataShipmentsInnerPhysicalProperties|null
     */
    public function getPhysicalProperties()
    {
        return $this->container['physical_properties'];
    }

    /**
     * Sets physical_properties
     *
     * @param \MyParcel\CoreApi\Generated\Capabilities\Model\ShipmentPostShipmentsRequestV11DataShipmentsInnerPhysicalProperties|null $physical_properties physical_properties
     *
     * @return self
     */
    public function setPhysicalProperties($physical_properties)
    {
        if (is_null($physical_properties)) {
            throw new \InvalidArgumentException('non-nullable physical_properties cannot be null');
        }
        $this->container['physical_properties'] = $physical_properties;

        return $this;
    }

    /**
     * Gets pickup
     *
     * @return \MyParcel\CoreApi\Generated\Capabilities\Model\RefShipmentPickup|null
     */
    public function getPickup()
    {
        return $this->container['pickup'];
    }

    /**
     * Sets pickup
     *
     * @param \MyParcel\CoreApi\Generated\Capabilities\Model\RefShipmentPickup|null $pickup pickup
     *
     * @return self
     */
    public function setPickup($pickup)
    {
        if (is_null($pickup)) {
            throw new \InvalidArgumentException('non-nullable pickup cannot be null');
        }
        $this->container['pickup'] = $pickup;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string|null
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string|null $note note
     *
     * @return self
     */
    public function setNote($note)
    {
        if (is_null($note)) {
            throw new \InvalidArgumentException('non-nullable note cannot be null');
        }
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets general_settings
     *
     * @return \MyParcel\CoreApi\Generated\Capabilities\Model\ShipmentPostShipmentsRequestV11DataShipmentsInnerGeneralSettings|null
     */
    public function getGeneralSettings()
    {
        return $this->container['general_settings'];
    }

    /**
     * Sets general_settings
     *
     * @param \MyParcel\CoreApi\Generated\Capabilities\Model\ShipmentPostShipmentsRequestV11DataShipmentsInnerGeneralSettings|null $general_settings general_settings
     *
     * @return self
     */
    public function setGeneralSettings($general_settings)
    {
        if (is_null($general_settings)) {
            throw new \InvalidArgumentException('non-nullable general_settings cannot be null');
        }
        $this->container['general_settings'] = $general_settings;

        return $this;
    }

    /**
     * Gets hidden
     *
     * @return int|null
     */
    public function getHidden()
    {
        return $this->container['hidden'];
    }

    /**
     * Sets hidden
     *
     * @param int|null $hidden hidden
     *
     * @return self
     */
    public function setHidden($hidden)
    {
        if (is_null($hidden)) {
            throw new \InvalidArgumentException('non-nullable hidden cannot be null');
        }
        $allowedValues = $this->getHiddenAllowableValues();
        if (!in_array($hidden, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'hidden', must be one of '%s'",
                    $hidden,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['hidden'] = $hidden;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


