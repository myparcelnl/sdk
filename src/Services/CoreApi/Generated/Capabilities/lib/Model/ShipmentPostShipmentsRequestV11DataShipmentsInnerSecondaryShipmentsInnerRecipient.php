<?php
/**
 * ShipmentPostShipmentsRequestV11DataShipmentsInnerSecondaryShipmentsInnerRecipient
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MyParcel\CoreApi\Generated\Capabilities
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * MyParcel API
 *
 * Allows MyParcel users to query delivery options, pickup & drop off locations with opening hours, register & trace shipments, print labels and more.
 *
 * The version of the OpenAPI document: 2025-02-13
 * Contact: info@myparcel.nl
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.15.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MyParcel\CoreApi\Generated\Capabilities\Model;

use \ArrayAccess;
use \MyParcel\CoreApi\Generated\Capabilities\ObjectSerializer;

/**
 * ShipmentPostShipmentsRequestV11DataShipmentsInnerSecondaryShipmentsInnerRecipient Class Doc Comment
 *
 * @category Class
 * @package  MyParcel\CoreApi\Generated\Capabilities
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ShipmentPostShipmentsRequestV11DataShipmentsInnerSecondaryShipmentsInnerRecipient implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'shipment_post_shipments_request_v1_1_data_shipments_inner_secondary_shipments_inner_recipient';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'cc' => 'string',
        'region' => 'string',
        'state' => 'string',
        'postal_code' => 'string',
        'city' => 'string',
        'street' => 'string',
        'street_additional_info' => 'string',
        'number' => 'string',
        'number_suffix' => 'string',
        'box_number' => 'string',
        'area' => 'string',
        'person' => 'string',
        'company' => 'string',
        'email' => '\MyParcel\CoreApi\Generated\Capabilities\Model\ShipmentPostShipmentsRequestV11DataShipmentsInnerRecipientEmail',
        'secondary_emails' => '\MyParcel\CoreApi\Generated\Capabilities\Model\RefShipmentRecipientSecondaryEmailsInner[]',
        'phone' => 'string',
        'eori_number' => 'string',
        'vat_number' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'cc' => null,
        'region' => null,
        'state' => null,
        'postal_code' => null,
        'city' => null,
        'street' => null,
        'street_additional_info' => null,
        'number' => null,
        'number_suffix' => null,
        'box_number' => null,
        'area' => null,
        'person' => null,
        'company' => null,
        'email' => null,
        'secondary_emails' => null,
        'phone' => null,
        'eori_number' => null,
        'vat_number' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'cc' => false,
        'region' => false,
        'state' => false,
        'postal_code' => false,
        'city' => false,
        'street' => false,
        'street_additional_info' => false,
        'number' => false,
        'number_suffix' => false,
        'box_number' => false,
        'area' => false,
        'person' => false,
        'company' => false,
        'email' => false,
        'secondary_emails' => false,
        'phone' => false,
        'eori_number' => false,
        'vat_number' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cc' => 'cc',
        'region' => 'region',
        'state' => 'state',
        'postal_code' => 'postal_code',
        'city' => 'city',
        'street' => 'street',
        'street_additional_info' => 'street_additional_info',
        'number' => 'number',
        'number_suffix' => 'number_suffix',
        'box_number' => 'box_number',
        'area' => 'area',
        'person' => 'person',
        'company' => 'company',
        'email' => 'email',
        'secondary_emails' => 'secondary_emails',
        'phone' => 'phone',
        'eori_number' => 'eori_number',
        'vat_number' => 'vat_number'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cc' => 'setCc',
        'region' => 'setRegion',
        'state' => 'setState',
        'postal_code' => 'setPostalCode',
        'city' => 'setCity',
        'street' => 'setStreet',
        'street_additional_info' => 'setStreetAdditionalInfo',
        'number' => 'setNumber',
        'number_suffix' => 'setNumberSuffix',
        'box_number' => 'setBoxNumber',
        'area' => 'setArea',
        'person' => 'setPerson',
        'company' => 'setCompany',
        'email' => 'setEmail',
        'secondary_emails' => 'setSecondaryEmails',
        'phone' => 'setPhone',
        'eori_number' => 'setEoriNumber',
        'vat_number' => 'setVatNumber'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cc' => 'getCc',
        'region' => 'getRegion',
        'state' => 'getState',
        'postal_code' => 'getPostalCode',
        'city' => 'getCity',
        'street' => 'getStreet',
        'street_additional_info' => 'getStreetAdditionalInfo',
        'number' => 'getNumber',
        'number_suffix' => 'getNumberSuffix',
        'box_number' => 'getBoxNumber',
        'area' => 'getArea',
        'person' => 'getPerson',
        'company' => 'getCompany',
        'email' => 'getEmail',
        'secondary_emails' => 'getSecondaryEmails',
        'phone' => 'getPhone',
        'eori_number' => 'getEoriNumber',
        'vat_number' => 'getVatNumber'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('cc', $data ?? [], null);
        $this->setIfExists('region', $data ?? [], null);
        $this->setIfExists('state', $data ?? [], null);
        $this->setIfExists('postal_code', $data ?? [], null);
        $this->setIfExists('city', $data ?? [], null);
        $this->setIfExists('street', $data ?? [], null);
        $this->setIfExists('street_additional_info', $data ?? [], null);
        $this->setIfExists('number', $data ?? [], null);
        $this->setIfExists('number_suffix', $data ?? [], null);
        $this->setIfExists('box_number', $data ?? [], null);
        $this->setIfExists('area', $data ?? [], null);
        $this->setIfExists('person', $data ?? [], null);
        $this->setIfExists('company', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('secondary_emails', $data ?? [], null);
        $this->setIfExists('phone', $data ?? [], null);
        $this->setIfExists('eori_number', $data ?? [], null);
        $this->setIfExists('vat_number', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['cc']) && (mb_strlen($this->container['cc']) > 2)) {
            $invalidProperties[] = "invalid value for 'cc', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['cc']) && (mb_strlen($this->container['cc']) < 2)) {
            $invalidProperties[] = "invalid value for 'cc', the character length must be bigger than or equal to 2.";
        }

        if (!is_null($this->container['region']) && (mb_strlen($this->container['region']) > 35)) {
            $invalidProperties[] = "invalid value for 'region', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['state']) && (mb_strlen($this->container['state']) > 2)) {
            $invalidProperties[] = "invalid value for 'state', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['postal_code']) && (mb_strlen($this->container['postal_code']) > 10)) {
            $invalidProperties[] = "invalid value for 'postal_code', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['city']) && (mb_strlen($this->container['city']) > 35)) {
            $invalidProperties[] = "invalid value for 'city', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['city']) && (mb_strlen($this->container['city']) < 1)) {
            $invalidProperties[] = "invalid value for 'city', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['street']) && (mb_strlen($this->container['street']) > 40)) {
            $invalidProperties[] = "invalid value for 'street', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['street']) && (mb_strlen($this->container['street']) < 1)) {
            $invalidProperties[] = "invalid value for 'street', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['street_additional_info']) && (mb_strlen($this->container['street_additional_info']) > 50)) {
            $invalidProperties[] = "invalid value for 'street_additional_info', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['number']) && (mb_strlen($this->container['number']) > 8)) {
            $invalidProperties[] = "invalid value for 'number', the character length must be smaller than or equal to 8.";
        }

        if (!is_null($this->container['number_suffix']) && (mb_strlen($this->container['number_suffix']) > 6)) {
            $invalidProperties[] = "invalid value for 'number_suffix', the character length must be smaller than or equal to 6.";
        }

        if (!is_null($this->container['box_number']) && (mb_strlen($this->container['box_number']) > 8)) {
            $invalidProperties[] = "invalid value for 'box_number', the character length must be smaller than or equal to 8.";
        }

        if (!is_null($this->container['area']) && (mb_strlen($this->container['area']) > 35)) {
            $invalidProperties[] = "invalid value for 'area', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['person']) && (mb_strlen($this->container['person']) > 50)) {
            $invalidProperties[] = "invalid value for 'person', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['person']) && (mb_strlen($this->container['person']) < 1)) {
            $invalidProperties[] = "invalid value for 'person', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['company']) && (mb_strlen($this->container['company']) > 50)) {
            $invalidProperties[] = "invalid value for 'company', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['secondary_emails']) && (count($this->container['secondary_emails']) > 4)) {
            $invalidProperties[] = "invalid value for 'secondary_emails', number of items must be less than or equal to 4.";
        }

        if (!is_null($this->container['phone']) && (mb_strlen($this->container['phone']) > 25)) {
            $invalidProperties[] = "invalid value for 'phone', the character length must be smaller than or equal to 25.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cc
     *
     * @return string|null
     */
    public function getCc()
    {
        return $this->container['cc'];
    }

    /**
     * Sets cc
     *
     * @param string|null $cc cc
     *
     * @return self
     */
    public function setCc($cc)
    {
        if (is_null($cc)) {
            throw new \InvalidArgumentException('non-nullable cc cannot be null');
        }
        if ((mb_strlen($cc) > 2)) {
            throw new \InvalidArgumentException('invalid length for $cc when calling ShipmentPostShipmentsRequestV11DataShipmentsInnerSecondaryShipmentsInnerRecipient., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($cc) < 2)) {
            throw new \InvalidArgumentException('invalid length for $cc when calling ShipmentPostShipmentsRequestV11DataShipmentsInnerSecondaryShipmentsInnerRecipient., must be bigger than or equal to 2.');
        }

        $this->container['cc'] = $cc;

        return $this;
    }

    /**
     * Gets region
     *
     * @return string|null
     */
    public function getRegion()
    {
        return $this->container['region'];
    }

    /**
     * Sets region
     *
     * @param string|null $region region
     *
     * @return self
     */
    public function setRegion($region)
    {
        if (is_null($region)) {
            throw new \InvalidArgumentException('non-nullable region cannot be null');
        }
        if ((mb_strlen($region) > 35)) {
            throw new \InvalidArgumentException('invalid length for $region when calling ShipmentPostShipmentsRequestV11DataShipmentsInnerSecondaryShipmentsInnerRecipient., must be smaller than or equal to 35.');
        }

        $this->container['region'] = $region;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string|null $state state
     *
     * @return self
     */
    public function setState($state)
    {
        if (is_null($state)) {
            throw new \InvalidArgumentException('non-nullable state cannot be null');
        }
        if ((mb_strlen($state) > 2)) {
            throw new \InvalidArgumentException('invalid length for $state when calling ShipmentPostShipmentsRequestV11DataShipmentsInnerSecondaryShipmentsInnerRecipient., must be smaller than or equal to 2.');
        }

        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets postal_code
     *
     * @return string|null
     */
    public function getPostalCode()
    {
        return $this->container['postal_code'];
    }

    /**
     * Sets postal_code
     *
     * @param string|null $postal_code postal_code
     *
     * @return self
     */
    public function setPostalCode($postal_code)
    {
        if (is_null($postal_code)) {
            throw new \InvalidArgumentException('non-nullable postal_code cannot be null');
        }
        if ((mb_strlen($postal_code) > 10)) {
            throw new \InvalidArgumentException('invalid length for $postal_code when calling ShipmentPostShipmentsRequestV11DataShipmentsInnerSecondaryShipmentsInnerRecipient., must be smaller than or equal to 10.');
        }

        $this->container['postal_code'] = $postal_code;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string|null
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string|null $city city
     *
     * @return self
     */
    public function setCity($city)
    {
        if (is_null($city)) {
            throw new \InvalidArgumentException('non-nullable city cannot be null');
        }
        if ((mb_strlen($city) > 35)) {
            throw new \InvalidArgumentException('invalid length for $city when calling ShipmentPostShipmentsRequestV11DataShipmentsInnerSecondaryShipmentsInnerRecipient., must be smaller than or equal to 35.');
        }
        if ((mb_strlen($city) < 1)) {
            throw new \InvalidArgumentException('invalid length for $city when calling ShipmentPostShipmentsRequestV11DataShipmentsInnerSecondaryShipmentsInnerRecipient., must be bigger than or equal to 1.');
        }

        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets street
     *
     * @return string|null
     */
    public function getStreet()
    {
        return $this->container['street'];
    }

    /**
     * Sets street
     *
     * @param string|null $street street
     *
     * @return self
     */
    public function setStreet($street)
    {
        if (is_null($street)) {
            throw new \InvalidArgumentException('non-nullable street cannot be null');
        }
        if ((mb_strlen($street) > 40)) {
            throw new \InvalidArgumentException('invalid length for $street when calling ShipmentPostShipmentsRequestV11DataShipmentsInnerSecondaryShipmentsInnerRecipient., must be smaller than or equal to 40.');
        }
        if ((mb_strlen($street) < 1)) {
            throw new \InvalidArgumentException('invalid length for $street when calling ShipmentPostShipmentsRequestV11DataShipmentsInnerSecondaryShipmentsInnerRecipient., must be bigger than or equal to 1.');
        }

        $this->container['street'] = $street;

        return $this;
    }

    /**
     * Gets street_additional_info
     *
     * @return string|null
     */
    public function getStreetAdditionalInfo()
    {
        return $this->container['street_additional_info'];
    }

    /**
     * Sets street_additional_info
     *
     * @param string|null $street_additional_info street_additional_info
     *
     * @return self
     */
    public function setStreetAdditionalInfo($street_additional_info)
    {
        if (is_null($street_additional_info)) {
            throw new \InvalidArgumentException('non-nullable street_additional_info cannot be null');
        }
        if ((mb_strlen($street_additional_info) > 50)) {
            throw new \InvalidArgumentException('invalid length for $street_additional_info when calling ShipmentPostShipmentsRequestV11DataShipmentsInnerSecondaryShipmentsInnerRecipient., must be smaller than or equal to 50.');
        }

        $this->container['street_additional_info'] = $street_additional_info;

        return $this;
    }

    /**
     * Gets number
     *
     * @return string|null
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param string|null $number number
     *
     * @return self
     */
    public function setNumber($number)
    {
        if (is_null($number)) {
            throw new \InvalidArgumentException('non-nullable number cannot be null');
        }
        if ((mb_strlen($number) > 8)) {
            throw new \InvalidArgumentException('invalid length for $number when calling ShipmentPostShipmentsRequestV11DataShipmentsInnerSecondaryShipmentsInnerRecipient., must be smaller than or equal to 8.');
        }

        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets number_suffix
     *
     * @return string|null
     */
    public function getNumberSuffix()
    {
        return $this->container['number_suffix'];
    }

    /**
     * Sets number_suffix
     *
     * @param string|null $number_suffix number_suffix
     *
     * @return self
     */
    public function setNumberSuffix($number_suffix)
    {
        if (is_null($number_suffix)) {
            throw new \InvalidArgumentException('non-nullable number_suffix cannot be null');
        }
        if ((mb_strlen($number_suffix) > 6)) {
            throw new \InvalidArgumentException('invalid length for $number_suffix when calling ShipmentPostShipmentsRequestV11DataShipmentsInnerSecondaryShipmentsInnerRecipient., must be smaller than or equal to 6.');
        }

        $this->container['number_suffix'] = $number_suffix;

        return $this;
    }

    /**
     * Gets box_number
     *
     * @return string|null
     */
    public function getBoxNumber()
    {
        return $this->container['box_number'];
    }

    /**
     * Sets box_number
     *
     * @param string|null $box_number box_number
     *
     * @return self
     */
    public function setBoxNumber($box_number)
    {
        if (is_null($box_number)) {
            throw new \InvalidArgumentException('non-nullable box_number cannot be null');
        }
        if ((mb_strlen($box_number) > 8)) {
            throw new \InvalidArgumentException('invalid length for $box_number when calling ShipmentPostShipmentsRequestV11DataShipmentsInnerSecondaryShipmentsInnerRecipient., must be smaller than or equal to 8.');
        }

        $this->container['box_number'] = $box_number;

        return $this;
    }

    /**
     * Gets area
     *
     * @return string|null
     */
    public function getArea()
    {
        return $this->container['area'];
    }

    /**
     * Sets area
     *
     * @param string|null $area area
     *
     * @return self
     */
    public function setArea($area)
    {
        if (is_null($area)) {
            throw new \InvalidArgumentException('non-nullable area cannot be null');
        }
        if ((mb_strlen($area) > 35)) {
            throw new \InvalidArgumentException('invalid length for $area when calling ShipmentPostShipmentsRequestV11DataShipmentsInnerSecondaryShipmentsInnerRecipient., must be smaller than or equal to 35.');
        }

        $this->container['area'] = $area;

        return $this;
    }

    /**
     * Gets person
     *
     * @return string|null
     */
    public function getPerson()
    {
        return $this->container['person'];
    }

    /**
     * Sets person
     *
     * @param string|null $person person
     *
     * @return self
     */
    public function setPerson($person)
    {
        if (is_null($person)) {
            throw new \InvalidArgumentException('non-nullable person cannot be null');
        }
        if ((mb_strlen($person) > 50)) {
            throw new \InvalidArgumentException('invalid length for $person when calling ShipmentPostShipmentsRequestV11DataShipmentsInnerSecondaryShipmentsInnerRecipient., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($person) < 1)) {
            throw new \InvalidArgumentException('invalid length for $person when calling ShipmentPostShipmentsRequestV11DataShipmentsInnerSecondaryShipmentsInnerRecipient., must be bigger than or equal to 1.');
        }

        $this->container['person'] = $person;

        return $this;
    }

    /**
     * Gets company
     *
     * @return string|null
     */
    public function getCompany()
    {
        return $this->container['company'];
    }

    /**
     * Sets company
     *
     * @param string|null $company company
     *
     * @return self
     */
    public function setCompany($company)
    {
        if (is_null($company)) {
            throw new \InvalidArgumentException('non-nullable company cannot be null');
        }
        if ((mb_strlen($company) > 50)) {
            throw new \InvalidArgumentException('invalid length for $company when calling ShipmentPostShipmentsRequestV11DataShipmentsInnerSecondaryShipmentsInnerRecipient., must be smaller than or equal to 50.');
        }

        $this->container['company'] = $company;

        return $this;
    }

    /**
     * Gets email
     *
     * @return \MyParcel\CoreApi\Generated\Capabilities\Model\ShipmentPostShipmentsRequestV11DataShipmentsInnerRecipientEmail|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param \MyParcel\CoreApi\Generated\Capabilities\Model\ShipmentPostShipmentsRequestV11DataShipmentsInnerRecipientEmail|null $email email
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets secondary_emails
     *
     * @return \MyParcel\CoreApi\Generated\Capabilities\Model\RefShipmentRecipientSecondaryEmailsInner[]|null
     */
    public function getSecondaryEmails()
    {
        return $this->container['secondary_emails'];
    }

    /**
     * Sets secondary_emails
     *
     * @param \MyParcel\CoreApi\Generated\Capabilities\Model\RefShipmentRecipientSecondaryEmailsInner[]|null $secondary_emails secondary_emails
     *
     * @return self
     */
    public function setSecondaryEmails($secondary_emails)
    {
        if (is_null($secondary_emails)) {
            throw new \InvalidArgumentException('non-nullable secondary_emails cannot be null');
        }

        if ((count($secondary_emails) > 4)) {
            throw new \InvalidArgumentException('invalid value for $secondary_emails when calling ShipmentPostShipmentsRequestV11DataShipmentsInnerSecondaryShipmentsInnerRecipient., number of items must be less than or equal to 4.');
        }
        $this->container['secondary_emails'] = $secondary_emails;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string|null
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string|null $phone phone
     *
     * @return self
     */
    public function setPhone($phone)
    {
        if (is_null($phone)) {
            throw new \InvalidArgumentException('non-nullable phone cannot be null');
        }
        if ((mb_strlen($phone) > 25)) {
            throw new \InvalidArgumentException('invalid length for $phone when calling ShipmentPostShipmentsRequestV11DataShipmentsInnerSecondaryShipmentsInnerRecipient., must be smaller than or equal to 25.');
        }

        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets eori_number
     *
     * @return string|null
     */
    public function getEoriNumber()
    {
        return $this->container['eori_number'];
    }

    /**
     * Sets eori_number
     *
     * @param string|null $eori_number eori_number
     *
     * @return self
     */
    public function setEoriNumber($eori_number)
    {
        if (is_null($eori_number)) {
            throw new \InvalidArgumentException('non-nullable eori_number cannot be null');
        }
        $this->container['eori_number'] = $eori_number;

        return $this;
    }

    /**
     * Gets vat_number
     *
     * @return string|null
     */
    public function getVatNumber()
    {
        return $this->container['vat_number'];
    }

    /**
     * Sets vat_number
     *
     * @param string|null $vat_number vat_number
     *
     * @return self
     */
    public function setVatNumber($vat_number)
    {
        if (is_null($vat_number)) {
            throw new \InvalidArgumentException('non-nullable vat_number cannot be null');
        }
        $this->container['vat_number'] = $vat_number;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


