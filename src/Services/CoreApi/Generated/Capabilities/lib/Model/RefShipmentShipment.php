<?php
/**
 * RefShipmentShipment
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MyParcel\CoreApi\Generated\Capabilities
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * MyParcel API
 *
 * Allows MyParcel users to query delivery options, pickup & drop off locations with opening hours, register & trace shipments, print labels and more.
 *
 * The version of the OpenAPI document: 2025-02-13
 * Contact: info@myparcel.nl
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.15.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MyParcel\CoreApi\Generated\Capabilities\Model;

use \ArrayAccess;
use \MyParcel\CoreApi\Generated\Capabilities\ObjectSerializer;

/**
 * RefShipmentShipment Class Doc Comment
 *
 * @category Class
 * @description A Shipment resource
 * @package  MyParcel\CoreApi\Generated\Capabilities
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class RefShipmentShipment implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_ref_shipment_shipment';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'parent_id' => 'int',
        'account_id' => 'int',
        'shop_id' => 'int',
        'shipment_type' => '\MyParcel\CoreApi\Generated\Capabilities\Model\RefShipmentType',
        'recipient' => '\MyParcel\CoreApi\Generated\Capabilities\Model\RefShipmentRecipient',
        'sender' => '\MyParcel\CoreApi\Generated\Capabilities\Model\RefShipmentSender',
        'status' => '\MyParcel\CoreApi\Generated\Capabilities\Model\RefShipmentStatus',
        'options' => '\MyParcel\CoreApi\Generated\Capabilities\Model\RefShipmentShipmentOptions',
        'general_settings' => '\MyParcel\CoreApi\Generated\Capabilities\Model\RefShipmentGeneralSettings',
        'pickup' => '\MyParcel\CoreApi\Generated\Capabilities\Model\RefShipmentPickup',
        'customs_declaration' => '\MyParcel\CoreApi\Generated\Capabilities\Model\RefShipmentCustomsDeclaration',
        'physical_properties' => '\MyParcel\CoreApi\Generated\Capabilities\Model\RefShipmentPhysicalProperties',
        'carrier' => '\MyParcel\CoreApi\Generated\Capabilities\Model\RefTypesCarrier',
        'note' => 'string',
        'delivered' => '\MyParcel\CoreApi\Generated\Capabilities\Model\RefTypesBoolish',
        'recipients' => 'float[]',
        'reference_identifier' => '\MyParcel\CoreApi\Generated\Capabilities\Model\RefShipmentShipmentReferenceIdentifier',
        'id' => 'int',
        'drop_off_point' => 'object',
        'hidden' => '\MyParcel\CoreApi\Generated\Capabilities\Model\RefTypesBoolish',
        'price' => '\MyParcel\CoreApi\Generated\Capabilities\Model\RefTypesMoney',
        'barcode' => 'string',
        'created' => '\DateTime',
        'modified' => '\DateTime',
        'external_provider' => 'string',
        'region' => 'string',
        'external_provider_id' => 'int',
        'payment_status' => 'string',
        'carrier_id' => '\MyParcel\CoreApi\Generated\Capabilities\Model\RefTypesCarrier',
        'platform_id' => 'int',
        'origin' => 'string',
        'user_agent' => 'string',
        'secondary_shipments' => 'mixed[]',
        'collection_contact' => 'mixed',
        'multi_collo_main_shipment_id' => 'mixed',
        'external_identifier' => 'string',
        'delayed' => 'bool',
        'contract_id' => 'int',
        'link_consumer_portal' => 'string',
        'partner_tracktraces' => 'mixed[]',
        'pickup_request_number' => 'mixed'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'parent_id' => 'int64',
        'account_id' => 'int64',
        'shop_id' => 'int64',
        'shipment_type' => null,
        'recipient' => null,
        'sender' => null,
        'status' => null,
        'options' => null,
        'general_settings' => null,
        'pickup' => null,
        'customs_declaration' => null,
        'physical_properties' => null,
        'carrier' => null,
        'note' => null,
        'delivered' => null,
        'recipients' => null,
        'reference_identifier' => null,
        'id' => 'int64',
        'drop_off_point' => null,
        'hidden' => null,
        'price' => null,
        'barcode' => null,
        'created' => 'date-time',
        'modified' => 'date-time',
        'external_provider' => null,
        'region' => null,
        'external_provider_id' => null,
        'payment_status' => null,
        'carrier_id' => null,
        'platform_id' => null,
        'origin' => null,
        'user_agent' => null,
        'secondary_shipments' => null,
        'collection_contact' => null,
        'multi_collo_main_shipment_id' => null,
        'external_identifier' => null,
        'delayed' => null,
        'contract_id' => null,
        'link_consumer_portal' => null,
        'partner_tracktraces' => null,
        'pickup_request_number' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'parent_id' => false,
        'account_id' => false,
        'shop_id' => false,
        'shipment_type' => false,
        'recipient' => false,
        'sender' => false,
        'status' => false,
        'options' => false,
        'general_settings' => false,
        'pickup' => false,
        'customs_declaration' => false,
        'physical_properties' => false,
        'carrier' => false,
        'note' => false,
        'delivered' => false,
        'recipients' => false,
        'reference_identifier' => false,
        'id' => false,
        'drop_off_point' => false,
        'hidden' => false,
        'price' => false,
        'barcode' => false,
        'created' => false,
        'modified' => false,
        'external_provider' => true,
        'region' => false,
        'external_provider_id' => true,
        'payment_status' => false,
        'carrier_id' => false,
        'platform_id' => false,
        'origin' => false,
        'user_agent' => false,
        'secondary_shipments' => false,
        'collection_contact' => true,
        'multi_collo_main_shipment_id' => true,
        'external_identifier' => false,
        'delayed' => false,
        'contract_id' => false,
        'link_consumer_portal' => true,
        'partner_tracktraces' => false,
        'pickup_request_number' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'parent_id' => 'parent_id',
        'account_id' => 'account_id',
        'shop_id' => 'shop_id',
        'shipment_type' => 'shipment_type',
        'recipient' => 'recipient',
        'sender' => 'sender',
        'status' => 'status',
        'options' => 'options',
        'general_settings' => 'general_settings',
        'pickup' => 'pickup',
        'customs_declaration' => 'customs_declaration',
        'physical_properties' => 'physical_properties',
        'carrier' => 'carrier',
        'note' => 'note',
        'delivered' => 'delivered',
        'recipients' => 'recipients',
        'reference_identifier' => 'reference_identifier',
        'id' => 'id',
        'drop_off_point' => 'drop_off_point',
        'hidden' => 'hidden',
        'price' => 'price',
        'barcode' => 'barcode',
        'created' => 'created',
        'modified' => 'modified',
        'external_provider' => 'external_provider',
        'region' => 'region',
        'external_provider_id' => 'external_provider_id',
        'payment_status' => 'payment_status',
        'carrier_id' => 'carrier_id',
        'platform_id' => 'platform_id',
        'origin' => 'origin',
        'user_agent' => 'user_agent',
        'secondary_shipments' => 'secondary_shipments',
        'collection_contact' => 'collection_contact',
        'multi_collo_main_shipment_id' => 'multi_collo_main_shipment_id',
        'external_identifier' => 'external_identifier',
        'delayed' => 'delayed',
        'contract_id' => 'contract_id',
        'link_consumer_portal' => 'link_consumer_portal',
        'partner_tracktraces' => 'partner_tracktraces',
        'pickup_request_number' => 'pickup_request_number'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'parent_id' => 'setParentId',
        'account_id' => 'setAccountId',
        'shop_id' => 'setShopId',
        'shipment_type' => 'setShipmentType',
        'recipient' => 'setRecipient',
        'sender' => 'setSender',
        'status' => 'setStatus',
        'options' => 'setOptions',
        'general_settings' => 'setGeneralSettings',
        'pickup' => 'setPickup',
        'customs_declaration' => 'setCustomsDeclaration',
        'physical_properties' => 'setPhysicalProperties',
        'carrier' => 'setCarrier',
        'note' => 'setNote',
        'delivered' => 'setDelivered',
        'recipients' => 'setRecipients',
        'reference_identifier' => 'setReferenceIdentifier',
        'id' => 'setId',
        'drop_off_point' => 'setDropOffPoint',
        'hidden' => 'setHidden',
        'price' => 'setPrice',
        'barcode' => 'setBarcode',
        'created' => 'setCreated',
        'modified' => 'setModified',
        'external_provider' => 'setExternalProvider',
        'region' => 'setRegion',
        'external_provider_id' => 'setExternalProviderId',
        'payment_status' => 'setPaymentStatus',
        'carrier_id' => 'setCarrierId',
        'platform_id' => 'setPlatformId',
        'origin' => 'setOrigin',
        'user_agent' => 'setUserAgent',
        'secondary_shipments' => 'setSecondaryShipments',
        'collection_contact' => 'setCollectionContact',
        'multi_collo_main_shipment_id' => 'setMultiColloMainShipmentId',
        'external_identifier' => 'setExternalIdentifier',
        'delayed' => 'setDelayed',
        'contract_id' => 'setContractId',
        'link_consumer_portal' => 'setLinkConsumerPortal',
        'partner_tracktraces' => 'setPartnerTracktraces',
        'pickup_request_number' => 'setPickupRequestNumber'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'parent_id' => 'getParentId',
        'account_id' => 'getAccountId',
        'shop_id' => 'getShopId',
        'shipment_type' => 'getShipmentType',
        'recipient' => 'getRecipient',
        'sender' => 'getSender',
        'status' => 'getStatus',
        'options' => 'getOptions',
        'general_settings' => 'getGeneralSettings',
        'pickup' => 'getPickup',
        'customs_declaration' => 'getCustomsDeclaration',
        'physical_properties' => 'getPhysicalProperties',
        'carrier' => 'getCarrier',
        'note' => 'getNote',
        'delivered' => 'getDelivered',
        'recipients' => 'getRecipients',
        'reference_identifier' => 'getReferenceIdentifier',
        'id' => 'getId',
        'drop_off_point' => 'getDropOffPoint',
        'hidden' => 'getHidden',
        'price' => 'getPrice',
        'barcode' => 'getBarcode',
        'created' => 'getCreated',
        'modified' => 'getModified',
        'external_provider' => 'getExternalProvider',
        'region' => 'getRegion',
        'external_provider_id' => 'getExternalProviderId',
        'payment_status' => 'getPaymentStatus',
        'carrier_id' => 'getCarrierId',
        'platform_id' => 'getPlatformId',
        'origin' => 'getOrigin',
        'user_agent' => 'getUserAgent',
        'secondary_shipments' => 'getSecondaryShipments',
        'collection_contact' => 'getCollectionContact',
        'multi_collo_main_shipment_id' => 'getMultiColloMainShipmentId',
        'external_identifier' => 'getExternalIdentifier',
        'delayed' => 'getDelayed',
        'contract_id' => 'getContractId',
        'link_consumer_portal' => 'getLinkConsumerPortal',
        'partner_tracktraces' => 'getPartnerTracktraces',
        'pickup_request_number' => 'getPickupRequestNumber'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const LINK_CONSUMER_PORTAL_EMPTY = '';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLinkConsumerPortalAllowableValues()
    {
        return [
            self::LINK_CONSUMER_PORTAL_EMPTY,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('parent_id', $data ?? [], null);
        $this->setIfExists('account_id', $data ?? [], null);
        $this->setIfExists('shop_id', $data ?? [], null);
        $this->setIfExists('shipment_type', $data ?? [], null);
        $this->setIfExists('recipient', $data ?? [], null);
        $this->setIfExists('sender', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('options', $data ?? [], null);
        $this->setIfExists('general_settings', $data ?? [], null);
        $this->setIfExists('pickup', $data ?? [], null);
        $this->setIfExists('customs_declaration', $data ?? [], null);
        $this->setIfExists('physical_properties', $data ?? [], null);
        $this->setIfExists('carrier', $data ?? [], null);
        $this->setIfExists('note', $data ?? [], null);
        $this->setIfExists('delivered', $data ?? [], null);
        $this->setIfExists('recipients', $data ?? [], null);
        $this->setIfExists('reference_identifier', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('drop_off_point', $data ?? [], null);
        $this->setIfExists('hidden', $data ?? [], null);
        $this->setIfExists('price', $data ?? [], null);
        $this->setIfExists('barcode', $data ?? [], null);
        $this->setIfExists('created', $data ?? [], null);
        $this->setIfExists('modified', $data ?? [], null);
        $this->setIfExists('external_provider', $data ?? [], null);
        $this->setIfExists('region', $data ?? [], null);
        $this->setIfExists('external_provider_id', $data ?? [], null);
        $this->setIfExists('payment_status', $data ?? [], null);
        $this->setIfExists('carrier_id', $data ?? [], null);
        $this->setIfExists('platform_id', $data ?? [], null);
        $this->setIfExists('origin', $data ?? [], null);
        $this->setIfExists('user_agent', $data ?? [], null);
        $this->setIfExists('secondary_shipments', $data ?? [], null);
        $this->setIfExists('collection_contact', $data ?? [], null);
        $this->setIfExists('multi_collo_main_shipment_id', $data ?? [], null);
        $this->setIfExists('external_identifier', $data ?? [], null);
        $this->setIfExists('delayed', $data ?? [], null);
        $this->setIfExists('contract_id', $data ?? [], null);
        $this->setIfExists('link_consumer_portal', $data ?? [], null);
        $this->setIfExists('partner_tracktraces', $data ?? [], null);
        $this->setIfExists('pickup_request_number', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['recipient'] === null) {
            $invalidProperties[] = "'recipient' can't be null";
        }
        if (!is_null($this->container['recipients']) && (count($this->container['recipients']) < 1)) {
            $invalidProperties[] = "invalid value for 'recipients', number of items must be greater than or equal to 1.";
        }

        $allowedValues = $this->getLinkConsumerPortalAllowableValues();
        if (!is_null($this->container['link_consumer_portal']) && !in_array($this->container['link_consumer_portal'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'link_consumer_portal', must be one of '%s'",
                $this->container['link_consumer_portal'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets parent_id
     *
     * @return int|null
     */
    public function getParentId()
    {
        return $this->container['parent_id'];
    }

    /**
     * Sets parent_id
     *
     * @param int|null $parent_id Parent Shipment ID. Used for related return Shipments.
     *
     * @return self
     */
    public function setParentId($parent_id)
    {
        if (is_null($parent_id)) {
            throw new \InvalidArgumentException('non-nullable parent_id cannot be null');
        }
        $this->container['parent_id'] = $parent_id;

        return $this;
    }

    /**
     * Gets account_id
     *
     * @return int|null
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param int|null $account_id ID of the Account that owns this Shipment.
     *
     * @return self
     */
    public function setAccountId($account_id)
    {
        if (is_null($account_id)) {
            throw new \InvalidArgumentException('non-nullable account_id cannot be null');
        }
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets shop_id
     *
     * @return int|null
     */
    public function getShopId()
    {
        return $this->container['shop_id'];
    }

    /**
     * Sets shop_id
     *
     * @param int|null $shop_id ID of the Shop that owns this Shipment.
     *
     * @return self
     */
    public function setShopId($shop_id)
    {
        if (is_null($shop_id)) {
            throw new \InvalidArgumentException('non-nullable shop_id cannot be null');
        }
        $this->container['shop_id'] = $shop_id;

        return $this;
    }

    /**
     * Gets shipment_type
     *
     * @return \MyParcel\CoreApi\Generated\Capabilities\Model\RefShipmentType|null
     */
    public function getShipmentType()
    {
        return $this->container['shipment_type'];
    }

    /**
     * Sets shipment_type
     *
     * @param \MyParcel\CoreApi\Generated\Capabilities\Model\RefShipmentType|null $shipment_type shipment_type
     *
     * @return self
     */
    public function setShipmentType($shipment_type)
    {
        if (is_null($shipment_type)) {
            throw new \InvalidArgumentException('non-nullable shipment_type cannot be null');
        }
        $this->container['shipment_type'] = $shipment_type;

        return $this;
    }

    /**
     * Gets recipient
     *
     * @return \MyParcel\CoreApi\Generated\Capabilities\Model\RefShipmentRecipient
     */
    public function getRecipient()
    {
        return $this->container['recipient'];
    }

    /**
     * Sets recipient
     *
     * @param \MyParcel\CoreApi\Generated\Capabilities\Model\RefShipmentRecipient $recipient recipient
     *
     * @return self
     */
    public function setRecipient($recipient)
    {
        if (is_null($recipient)) {
            throw new \InvalidArgumentException('non-nullable recipient cannot be null');
        }
        $this->container['recipient'] = $recipient;

        return $this;
    }

    /**
     * Gets sender
     *
     * @return \MyParcel\CoreApi\Generated\Capabilities\Model\RefShipmentSender|null
     */
    public function getSender()
    {
        return $this->container['sender'];
    }

    /**
     * Sets sender
     *
     * @param \MyParcel\CoreApi\Generated\Capabilities\Model\RefShipmentSender|null $sender sender
     *
     * @return self
     */
    public function setSender($sender)
    {
        if (is_null($sender)) {
            throw new \InvalidArgumentException('non-nullable sender cannot be null');
        }
        $this->container['sender'] = $sender;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \MyParcel\CoreApi\Generated\Capabilities\Model\RefShipmentStatus|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \MyParcel\CoreApi\Generated\Capabilities\Model\RefShipmentStatus|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets options
     *
     * @return \MyParcel\CoreApi\Generated\Capabilities\Model\RefShipmentShipmentOptions|null
     */
    public function getOptions()
    {
        return $this->container['options'];
    }

    /**
     * Sets options
     *
     * @param \MyParcel\CoreApi\Generated\Capabilities\Model\RefShipmentShipmentOptions|null $options options
     *
     * @return self
     */
    public function setOptions($options)
    {
        if (is_null($options)) {
            throw new \InvalidArgumentException('non-nullable options cannot be null');
        }
        $this->container['options'] = $options;

        return $this;
    }

    /**
     * Gets general_settings
     *
     * @return \MyParcel\CoreApi\Generated\Capabilities\Model\RefShipmentGeneralSettings|null
     */
    public function getGeneralSettings()
    {
        return $this->container['general_settings'];
    }

    /**
     * Sets general_settings
     *
     * @param \MyParcel\CoreApi\Generated\Capabilities\Model\RefShipmentGeneralSettings|null $general_settings general_settings
     *
     * @return self
     */
    public function setGeneralSettings($general_settings)
    {
        if (is_null($general_settings)) {
            throw new \InvalidArgumentException('non-nullable general_settings cannot be null');
        }
        $this->container['general_settings'] = $general_settings;

        return $this;
    }

    /**
     * Gets pickup
     *
     * @return \MyParcel\CoreApi\Generated\Capabilities\Model\RefShipmentPickup|null
     */
    public function getPickup()
    {
        return $this->container['pickup'];
    }

    /**
     * Sets pickup
     *
     * @param \MyParcel\CoreApi\Generated\Capabilities\Model\RefShipmentPickup|null $pickup pickup
     *
     * @return self
     */
    public function setPickup($pickup)
    {
        if (is_null($pickup)) {
            throw new \InvalidArgumentException('non-nullable pickup cannot be null');
        }
        $this->container['pickup'] = $pickup;

        return $this;
    }

    /**
     * Gets customs_declaration
     *
     * @return \MyParcel\CoreApi\Generated\Capabilities\Model\RefShipmentCustomsDeclaration|null
     */
    public function getCustomsDeclaration()
    {
        return $this->container['customs_declaration'];
    }

    /**
     * Sets customs_declaration
     *
     * @param \MyParcel\CoreApi\Generated\Capabilities\Model\RefShipmentCustomsDeclaration|null $customs_declaration customs_declaration
     *
     * @return self
     */
    public function setCustomsDeclaration($customs_declaration)
    {
        if (is_null($customs_declaration)) {
            throw new \InvalidArgumentException('non-nullable customs_declaration cannot be null');
        }
        $this->container['customs_declaration'] = $customs_declaration;

        return $this;
    }

    /**
     * Gets physical_properties
     *
     * @return \MyParcel\CoreApi\Generated\Capabilities\Model\RefShipmentPhysicalProperties|null
     */
    public function getPhysicalProperties()
    {
        return $this->container['physical_properties'];
    }

    /**
     * Sets physical_properties
     *
     * @param \MyParcel\CoreApi\Generated\Capabilities\Model\RefShipmentPhysicalProperties|null $physical_properties physical_properties
     *
     * @return self
     */
    public function setPhysicalProperties($physical_properties)
    {
        if (is_null($physical_properties)) {
            throw new \InvalidArgumentException('non-nullable physical_properties cannot be null');
        }
        $this->container['physical_properties'] = $physical_properties;

        return $this;
    }

    /**
     * Gets carrier
     *
     * @return \MyParcel\CoreApi\Generated\Capabilities\Model\RefTypesCarrier|null
     */
    public function getCarrier()
    {
        return $this->container['carrier'];
    }

    /**
     * Sets carrier
     *
     * @param \MyParcel\CoreApi\Generated\Capabilities\Model\RefTypesCarrier|null $carrier carrier
     *
     * @return self
     */
    public function setCarrier($carrier)
    {
        if (is_null($carrier)) {
            throw new \InvalidArgumentException('non-nullable carrier cannot be null');
        }
        $this->container['carrier'] = $carrier;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string|null
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string|null $note note
     *
     * @return self
     */
    public function setNote($note)
    {
        if (is_null($note)) {
            throw new \InvalidArgumentException('non-nullable note cannot be null');
        }
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets delivered
     *
     * @return \MyParcel\CoreApi\Generated\Capabilities\Model\RefTypesBoolish|null
     */
    public function getDelivered()
    {
        return $this->container['delivered'];
    }

    /**
     * Sets delivered
     *
     * @param \MyParcel\CoreApi\Generated\Capabilities\Model\RefTypesBoolish|null $delivered delivered
     *
     * @return self
     */
    public function setDelivered($delivered)
    {
        if (is_null($delivered)) {
            throw new \InvalidArgumentException('non-nullable delivered cannot be null');
        }
        $this->container['delivered'] = $delivered;

        return $this;
    }

    /**
     * Gets recipients
     *
     * @return float[]|null
     */
    public function getRecipients()
    {
        return $this->container['recipients'];
    }

    /**
     * Sets recipients
     *
     * @param float[]|null $recipients recipients
     *
     * @return self
     */
    public function setRecipients($recipients)
    {
        if (is_null($recipients)) {
            throw new \InvalidArgumentException('non-nullable recipients cannot be null');
        }


        if ((count($recipients) < 1)) {
            throw new \InvalidArgumentException('invalid length for $recipients when calling RefShipmentShipment., number of items must be greater than or equal to 1.');
        }
        $this->container['recipients'] = $recipients;

        return $this;
    }

    /**
     * Gets reference_identifier
     *
     * @return \MyParcel\CoreApi\Generated\Capabilities\Model\RefShipmentShipmentReferenceIdentifier|null
     */
    public function getReferenceIdentifier()
    {
        return $this->container['reference_identifier'];
    }

    /**
     * Sets reference_identifier
     *
     * @param \MyParcel\CoreApi\Generated\Capabilities\Model\RefShipmentShipmentReferenceIdentifier|null $reference_identifier reference_identifier
     *
     * @return self
     */
    public function setReferenceIdentifier($reference_identifier)
    {
        if (is_null($reference_identifier)) {
            throw new \InvalidArgumentException('non-nullable reference_identifier cannot be null');
        }
        $this->container['reference_identifier'] = $reference_identifier;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets drop_off_point
     *
     * @return object|null
     */
    public function getDropOffPoint()
    {
        return $this->container['drop_off_point'];
    }

    /**
     * Sets drop_off_point
     *
     * @param object|null $drop_off_point drop_off_point
     *
     * @return self
     */
    public function setDropOffPoint($drop_off_point)
    {
        if (is_null($drop_off_point)) {
            throw new \InvalidArgumentException('non-nullable drop_off_point cannot be null');
        }
        $this->container['drop_off_point'] = $drop_off_point;

        return $this;
    }

    /**
     * Gets hidden
     *
     * @return \MyParcel\CoreApi\Generated\Capabilities\Model\RefTypesBoolish|null
     */
    public function getHidden()
    {
        return $this->container['hidden'];
    }

    /**
     * Sets hidden
     *
     * @param \MyParcel\CoreApi\Generated\Capabilities\Model\RefTypesBoolish|null $hidden hidden
     *
     * @return self
     */
    public function setHidden($hidden)
    {
        if (is_null($hidden)) {
            throw new \InvalidArgumentException('non-nullable hidden cannot be null');
        }
        $this->container['hidden'] = $hidden;

        return $this;
    }

    /**
     * Gets price
     *
     * @return \MyParcel\CoreApi\Generated\Capabilities\Model\RefTypesMoney|null
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param \MyParcel\CoreApi\Generated\Capabilities\Model\RefTypesMoney|null $price price
     *
     * @return self
     */
    public function setPrice($price)
    {
        if (is_null($price)) {
            throw new \InvalidArgumentException('non-nullable price cannot be null');
        }
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets barcode
     *
     * @return string|null
     */
    public function getBarcode()
    {
        return $this->container['barcode'];
    }

    /**
     * Sets barcode
     *
     * @param string|null $barcode barcode
     *
     * @return self
     */
    public function setBarcode($barcode)
    {
        if (is_null($barcode)) {
            throw new \InvalidArgumentException('non-nullable barcode cannot be null');
        }
        $this->container['barcode'] = $barcode;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime|null
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime|null $created created
     *
     * @return self
     */
    public function setCreated($created)
    {
        if (is_null($created)) {
            throw new \InvalidArgumentException('non-nullable created cannot be null');
        }
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets modified
     *
     * @return \DateTime|null
     */
    public function getModified()
    {
        return $this->container['modified'];
    }

    /**
     * Sets modified
     *
     * @param \DateTime|null $modified modified
     *
     * @return self
     */
    public function setModified($modified)
    {
        if (is_null($modified)) {
            throw new \InvalidArgumentException('non-nullable modified cannot be null');
        }
        $this->container['modified'] = $modified;

        return $this;
    }

    /**
     * Gets external_provider
     *
     * @return string|null
     */
    public function getExternalProvider()
    {
        return $this->container['external_provider'];
    }

    /**
     * Sets external_provider
     *
     * @param string|null $external_provider external_provider
     *
     * @return self
     */
    public function setExternalProvider($external_provider)
    {
        if (is_null($external_provider)) {
            array_push($this->openAPINullablesSetToNull, 'external_provider');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('external_provider', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['external_provider'] = $external_provider;

        return $this;
    }

    /**
     * Gets region
     *
     * @return string|null
     */
    public function getRegion()
    {
        return $this->container['region'];
    }

    /**
     * Sets region
     *
     * @param string|null $region region
     *
     * @return self
     */
    public function setRegion($region)
    {
        if (is_null($region)) {
            throw new \InvalidArgumentException('non-nullable region cannot be null');
        }
        $this->container['region'] = $region;

        return $this;
    }

    /**
     * Gets external_provider_id
     *
     * @return int|null
     */
    public function getExternalProviderId()
    {
        return $this->container['external_provider_id'];
    }

    /**
     * Sets external_provider_id
     *
     * @param int|null $external_provider_id external_provider_id
     *
     * @return self
     */
    public function setExternalProviderId($external_provider_id)
    {
        if (is_null($external_provider_id)) {
            array_push($this->openAPINullablesSetToNull, 'external_provider_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('external_provider_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['external_provider_id'] = $external_provider_id;

        return $this;
    }

    /**
     * Gets payment_status
     *
     * @return string|null
     */
    public function getPaymentStatus()
    {
        return $this->container['payment_status'];
    }

    /**
     * Sets payment_status
     *
     * @param string|null $payment_status payment_status
     *
     * @return self
     */
    public function setPaymentStatus($payment_status)
    {
        if (is_null($payment_status)) {
            throw new \InvalidArgumentException('non-nullable payment_status cannot be null');
        }
        $this->container['payment_status'] = $payment_status;

        return $this;
    }

    /**
     * Gets carrier_id
     *
     * @return \MyParcel\CoreApi\Generated\Capabilities\Model\RefTypesCarrier|null
     */
    public function getCarrierId()
    {
        return $this->container['carrier_id'];
    }

    /**
     * Sets carrier_id
     *
     * @param \MyParcel\CoreApi\Generated\Capabilities\Model\RefTypesCarrier|null $carrier_id carrier_id
     *
     * @return self
     */
    public function setCarrierId($carrier_id)
    {
        if (is_null($carrier_id)) {
            throw new \InvalidArgumentException('non-nullable carrier_id cannot be null');
        }
        $this->container['carrier_id'] = $carrier_id;

        return $this;
    }

    /**
     * Gets platform_id
     *
     * @return int|null
     */
    public function getPlatformId()
    {
        return $this->container['platform_id'];
    }

    /**
     * Sets platform_id
     *
     * @param int|null $platform_id platform_id
     *
     * @return self
     */
    public function setPlatformId($platform_id)
    {
        if (is_null($platform_id)) {
            throw new \InvalidArgumentException('non-nullable platform_id cannot be null');
        }
        $this->container['platform_id'] = $platform_id;

        return $this;
    }

    /**
     * Gets origin
     *
     * @return string|null
     */
    public function getOrigin()
    {
        return $this->container['origin'];
    }

    /**
     * Sets origin
     *
     * @param string|null $origin origin
     *
     * @return self
     */
    public function setOrigin($origin)
    {
        if (is_null($origin)) {
            throw new \InvalidArgumentException('non-nullable origin cannot be null');
        }
        $this->container['origin'] = $origin;

        return $this;
    }

    /**
     * Gets user_agent
     *
     * @return string|null
     */
    public function getUserAgent()
    {
        return $this->container['user_agent'];
    }

    /**
     * Sets user_agent
     *
     * @param string|null $user_agent user_agent
     *
     * @return self
     */
    public function setUserAgent($user_agent)
    {
        if (is_null($user_agent)) {
            throw new \InvalidArgumentException('non-nullable user_agent cannot be null');
        }
        $this->container['user_agent'] = $user_agent;

        return $this;
    }

    /**
     * Gets secondary_shipments
     *
     * @return mixed[]|null
     */
    public function getSecondaryShipments()
    {
        return $this->container['secondary_shipments'];
    }

    /**
     * Sets secondary_shipments
     *
     * @param mixed[]|null $secondary_shipments secondary_shipments
     *
     * @return self
     */
    public function setSecondaryShipments($secondary_shipments)
    {
        if (is_null($secondary_shipments)) {
            throw new \InvalidArgumentException('non-nullable secondary_shipments cannot be null');
        }
        $this->container['secondary_shipments'] = $secondary_shipments;

        return $this;
    }

    /**
     * Gets collection_contact
     *
     * @return mixed|null
     */
    public function getCollectionContact()
    {
        return $this->container['collection_contact'];
    }

    /**
     * Sets collection_contact
     *
     * @param mixed|null $collection_contact collection_contact
     *
     * @return self
     */
    public function setCollectionContact($collection_contact)
    {
        if (is_null($collection_contact)) {
            array_push($this->openAPINullablesSetToNull, 'collection_contact');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('collection_contact', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['collection_contact'] = $collection_contact;

        return $this;
    }

    /**
     * Gets multi_collo_main_shipment_id
     *
     * @return mixed|null
     */
    public function getMultiColloMainShipmentId()
    {
        return $this->container['multi_collo_main_shipment_id'];
    }

    /**
     * Sets multi_collo_main_shipment_id
     *
     * @param mixed|null $multi_collo_main_shipment_id multi_collo_main_shipment_id
     *
     * @return self
     */
    public function setMultiColloMainShipmentId($multi_collo_main_shipment_id)
    {
        if (is_null($multi_collo_main_shipment_id)) {
            array_push($this->openAPINullablesSetToNull, 'multi_collo_main_shipment_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('multi_collo_main_shipment_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['multi_collo_main_shipment_id'] = $multi_collo_main_shipment_id;

        return $this;
    }

    /**
     * Gets external_identifier
     *
     * @return string|null
     */
    public function getExternalIdentifier()
    {
        return $this->container['external_identifier'];
    }

    /**
     * Sets external_identifier
     *
     * @param string|null $external_identifier external_identifier
     *
     * @return self
     */
    public function setExternalIdentifier($external_identifier)
    {
        if (is_null($external_identifier)) {
            throw new \InvalidArgumentException('non-nullable external_identifier cannot be null');
        }
        $this->container['external_identifier'] = $external_identifier;

        return $this;
    }

    /**
     * Gets delayed
     *
     * @return bool|null
     */
    public function getDelayed()
    {
        return $this->container['delayed'];
    }

    /**
     * Sets delayed
     *
     * @param bool|null $delayed delayed
     *
     * @return self
     */
    public function setDelayed($delayed)
    {
        if (is_null($delayed)) {
            throw new \InvalidArgumentException('non-nullable delayed cannot be null');
        }
        $this->container['delayed'] = $delayed;

        return $this;
    }

    /**
     * Gets contract_id
     *
     * @return int|null
     */
    public function getContractId()
    {
        return $this->container['contract_id'];
    }

    /**
     * Sets contract_id
     *
     * @param int|null $contract_id contract_id
     *
     * @return self
     */
    public function setContractId($contract_id)
    {
        if (is_null($contract_id)) {
            throw new \InvalidArgumentException('non-nullable contract_id cannot be null');
        }
        $this->container['contract_id'] = $contract_id;

        return $this;
    }

    /**
     * Gets link_consumer_portal
     *
     * @return string|null
     */
    public function getLinkConsumerPortal()
    {
        return $this->container['link_consumer_portal'];
    }

    /**
     * Sets link_consumer_portal
     *
     * @param string|null $link_consumer_portal link_consumer_portal
     *
     * @return self
     */
    public function setLinkConsumerPortal($link_consumer_portal)
    {
        if (is_null($link_consumer_portal)) {
            array_push($this->openAPINullablesSetToNull, 'link_consumer_portal');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('link_consumer_portal', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getLinkConsumerPortalAllowableValues();
        if (!is_null($link_consumer_portal) && !in_array($link_consumer_portal, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'link_consumer_portal', must be one of '%s'",
                    $link_consumer_portal,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['link_consumer_portal'] = $link_consumer_portal;

        return $this;
    }

    /**
     * Gets partner_tracktraces
     *
     * @return mixed[]|null
     */
    public function getPartnerTracktraces()
    {
        return $this->container['partner_tracktraces'];
    }

    /**
     * Sets partner_tracktraces
     *
     * @param mixed[]|null $partner_tracktraces partner_tracktraces
     *
     * @return self
     */
    public function setPartnerTracktraces($partner_tracktraces)
    {
        if (is_null($partner_tracktraces)) {
            throw new \InvalidArgumentException('non-nullable partner_tracktraces cannot be null');
        }
        $this->container['partner_tracktraces'] = $partner_tracktraces;

        return $this;
    }

    /**
     * Gets pickup_request_number
     *
     * @return mixed|null
     */
    public function getPickupRequestNumber()
    {
        return $this->container['pickup_request_number'];
    }

    /**
     * Sets pickup_request_number
     *
     * @param mixed|null $pickup_request_number pickup_request_number
     *
     * @return self
     */
    public function setPickupRequestNumber($pickup_request_number)
    {
        if (is_null($pickup_request_number)) {
            array_push($this->openAPINullablesSetToNull, 'pickup_request_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pickup_request_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pickup_request_number'] = $pickup_request_number;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


