<?php
/**
 * ShipmentPostShipmentsRequestV11DataShipmentsInnerGeneralSettings
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MyParcel\CoreApi\Generated\Capabilities
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * MyParcel API
 *
 * Allows MyParcel users to query delivery options, pickup & drop off locations with opening hours, register & trace shipments, print labels and more.
 *
 * The version of the OpenAPI document: 2025-02-13
 * Contact: info@myparcel.nl
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.15.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MyParcel\CoreApi\Generated\Capabilities\Model;

use \ArrayAccess;
use \MyParcel\CoreApi\Generated\Capabilities\ObjectSerializer;

/**
 * ShipmentPostShipmentsRequestV11DataShipmentsInnerGeneralSettings Class Doc Comment
 *
 * @category Class
 * @package  MyParcel\CoreApi\Generated\Capabilities
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ShipmentPostShipmentsRequestV11DataShipmentsInnerGeneralSettings implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'shipment_post_shipments_request_v1_1_data_shipments_inner_general_settings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'save_recipient_address' => 'int',
        'delivery_notification' => 'int',
        'delivery_notification_email' => 'string[]',
        'disable_auto_detect_pickup' => 'int',
        'printer_identifier' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'save_recipient_address' => null,
        'delivery_notification' => null,
        'delivery_notification_email' => null,
        'disable_auto_detect_pickup' => null,
        'printer_identifier' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'save_recipient_address' => false,
        'delivery_notification' => false,
        'delivery_notification_email' => false,
        'disable_auto_detect_pickup' => false,
        'printer_identifier' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'save_recipient_address' => 'save_recipient_address',
        'delivery_notification' => 'delivery_notification',
        'delivery_notification_email' => 'delivery_notification_email',
        'disable_auto_detect_pickup' => 'disable_auto_detect_pickup',
        'printer_identifier' => 'printer_identifier'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'save_recipient_address' => 'setSaveRecipientAddress',
        'delivery_notification' => 'setDeliveryNotification',
        'delivery_notification_email' => 'setDeliveryNotificationEmail',
        'disable_auto_detect_pickup' => 'setDisableAutoDetectPickup',
        'printer_identifier' => 'setPrinterIdentifier'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'save_recipient_address' => 'getSaveRecipientAddress',
        'delivery_notification' => 'getDeliveryNotification',
        'delivery_notification_email' => 'getDeliveryNotificationEmail',
        'disable_auto_detect_pickup' => 'getDisableAutoDetectPickup',
        'printer_identifier' => 'getPrinterIdentifier'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const SAVE_RECIPIENT_ADDRESS_NUMBER_0 = 0;
    public const SAVE_RECIPIENT_ADDRESS_NUMBER_1 = 1;
    public const DELIVERY_NOTIFICATION_NUMBER_0 = 0;
    public const DELIVERY_NOTIFICATION_NUMBER_1 = 1;
    public const DISABLE_AUTO_DETECT_PICKUP_NUMBER_0 = 0;
    public const DISABLE_AUTO_DETECT_PICKUP_NUMBER_1 = 1;

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSaveRecipientAddressAllowableValues()
    {
        return [
            self::SAVE_RECIPIENT_ADDRESS_NUMBER_0,
            self::SAVE_RECIPIENT_ADDRESS_NUMBER_1,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDeliveryNotificationAllowableValues()
    {
        return [
            self::DELIVERY_NOTIFICATION_NUMBER_0,
            self::DELIVERY_NOTIFICATION_NUMBER_1,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDisableAutoDetectPickupAllowableValues()
    {
        return [
            self::DISABLE_AUTO_DETECT_PICKUP_NUMBER_0,
            self::DISABLE_AUTO_DETECT_PICKUP_NUMBER_1,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('save_recipient_address', $data ?? [], null);
        $this->setIfExists('delivery_notification', $data ?? [], null);
        $this->setIfExists('delivery_notification_email', $data ?? [], null);
        $this->setIfExists('disable_auto_detect_pickup', $data ?? [], null);
        $this->setIfExists('printer_identifier', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getSaveRecipientAddressAllowableValues();
        if (!is_null($this->container['save_recipient_address']) && !in_array($this->container['save_recipient_address'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'save_recipient_address', must be one of '%s'",
                $this->container['save_recipient_address'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDeliveryNotificationAllowableValues();
        if (!is_null($this->container['delivery_notification']) && !in_array($this->container['delivery_notification'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'delivery_notification', must be one of '%s'",
                $this->container['delivery_notification'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDisableAutoDetectPickupAllowableValues();
        if (!is_null($this->container['disable_auto_detect_pickup']) && !in_array($this->container['disable_auto_detect_pickup'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'disable_auto_detect_pickup', must be one of '%s'",
                $this->container['disable_auto_detect_pickup'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets save_recipient_address
     *
     * @return int|null
     */
    public function getSaveRecipientAddress()
    {
        return $this->container['save_recipient_address'];
    }

    /**
     * Sets save_recipient_address
     *
     * @param int|null $save_recipient_address save_recipient_address
     *
     * @return self
     */
    public function setSaveRecipientAddress($save_recipient_address)
    {
        if (is_null($save_recipient_address)) {
            throw new \InvalidArgumentException('non-nullable save_recipient_address cannot be null');
        }
        $allowedValues = $this->getSaveRecipientAddressAllowableValues();
        if (!in_array($save_recipient_address, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'save_recipient_address', must be one of '%s'",
                    $save_recipient_address,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['save_recipient_address'] = $save_recipient_address;

        return $this;
    }

    /**
     * Gets delivery_notification
     *
     * @return int|null
     */
    public function getDeliveryNotification()
    {
        return $this->container['delivery_notification'];
    }

    /**
     * Sets delivery_notification
     *
     * @param int|null $delivery_notification delivery_notification
     *
     * @return self
     */
    public function setDeliveryNotification($delivery_notification)
    {
        if (is_null($delivery_notification)) {
            throw new \InvalidArgumentException('non-nullable delivery_notification cannot be null');
        }
        $allowedValues = $this->getDeliveryNotificationAllowableValues();
        if (!in_array($delivery_notification, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'delivery_notification', must be one of '%s'",
                    $delivery_notification,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['delivery_notification'] = $delivery_notification;

        return $this;
    }

    /**
     * Gets delivery_notification_email
     *
     * @return string[]|null
     */
    public function getDeliveryNotificationEmail()
    {
        return $this->container['delivery_notification_email'];
    }

    /**
     * Sets delivery_notification_email
     *
     * @param string[]|null $delivery_notification_email delivery_notification_email
     *
     * @return self
     */
    public function setDeliveryNotificationEmail($delivery_notification_email)
    {
        if (is_null($delivery_notification_email)) {
            throw new \InvalidArgumentException('non-nullable delivery_notification_email cannot be null');
        }
        $this->container['delivery_notification_email'] = $delivery_notification_email;

        return $this;
    }

    /**
     * Gets disable_auto_detect_pickup
     *
     * @return int|null
     */
    public function getDisableAutoDetectPickup()
    {
        return $this->container['disable_auto_detect_pickup'];
    }

    /**
     * Sets disable_auto_detect_pickup
     *
     * @param int|null $disable_auto_detect_pickup disable_auto_detect_pickup
     *
     * @return self
     */
    public function setDisableAutoDetectPickup($disable_auto_detect_pickup)
    {
        if (is_null($disable_auto_detect_pickup)) {
            throw new \InvalidArgumentException('non-nullable disable_auto_detect_pickup cannot be null');
        }
        $allowedValues = $this->getDisableAutoDetectPickupAllowableValues();
        if (!in_array($disable_auto_detect_pickup, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'disable_auto_detect_pickup', must be one of '%s'",
                    $disable_auto_detect_pickup,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['disable_auto_detect_pickup'] = $disable_auto_detect_pickup;

        return $this;
    }

    /**
     * Gets printer_identifier
     *
     * @return string|null
     */
    public function getPrinterIdentifier()
    {
        return $this->container['printer_identifier'];
    }

    /**
     * Sets printer_identifier
     *
     * @param string|null $printer_identifier printer_identifier
     *
     * @return self
     */
    public function setPrinterIdentifier($printer_identifier)
    {
        if (is_null($printer_identifier)) {
            throw new \InvalidArgumentException('non-nullable printer_identifier cannot be null');
        }
        $this->container['printer_identifier'] = $printer_identifier;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


