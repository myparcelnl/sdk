<?php
/**
 * CapabilitiesPostCapabilitiesRequestV1DataCapabilitiesInnerOptions
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MyParcel\CoreApi\Generated\Capabilities
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * MyParcel API
 *
 * Allows MyParcel users to query delivery options, pickup & drop off locations with opening hours, register & trace shipments, print labels and more.
 *
 * The version of the OpenAPI document: 2025-02-13
 * Contact: info@myparcel.nl
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.15.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MyParcel\CoreApi\Generated\Capabilities\Model;

use \ArrayAccess;
use \MyParcel\CoreApi\Generated\Capabilities\ObjectSerializer;

/**
 * CapabilitiesPostCapabilitiesRequestV1DataCapabilitiesInnerOptions Class Doc Comment
 *
 * @category Class
 * @description Shipment options object. Empty objects indicate the option is requested/enabled.
 * @package  MyParcel\CoreApi\Generated\Capabilities
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CapabilitiesPostCapabilitiesRequestV1DataCapabilitiesInnerOptions implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'capabilities_post_capabilities_request_v1_data_capabilities_inner_options';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'age_check' => 'object',
        'cash_on_delivery' => 'object',
        'collect' => 'object',
        'cooled_delivery' => 'object',
        'drop_off_at_postal_point' => 'object',
        'extra_assurance' => 'object',
        'hide_sender' => 'object',
        'large_format' => 'object',
        'only_recipient' => 'object',
        'receipt_code' => 'object',
        'return' => 'object',
        'same_day_delivery' => 'object',
        'saturday_delivery' => 'object',
        'signature' => 'object',
        'tracked' => 'object',
        'insurance' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'age_check' => null,
        'cash_on_delivery' => null,
        'collect' => null,
        'cooled_delivery' => null,
        'drop_off_at_postal_point' => null,
        'extra_assurance' => null,
        'hide_sender' => null,
        'large_format' => null,
        'only_recipient' => null,
        'receipt_code' => null,
        'return' => null,
        'same_day_delivery' => null,
        'saturday_delivery' => null,
        'signature' => null,
        'tracked' => null,
        'insurance' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'age_check' => false,
        'cash_on_delivery' => false,
        'collect' => false,
        'cooled_delivery' => false,
        'drop_off_at_postal_point' => false,
        'extra_assurance' => false,
        'hide_sender' => false,
        'large_format' => false,
        'only_recipient' => false,
        'receipt_code' => false,
        'return' => false,
        'same_day_delivery' => false,
        'saturday_delivery' => false,
        'signature' => false,
        'tracked' => false,
        'insurance' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'age_check' => 'age_check',
        'cash_on_delivery' => 'cash_on_delivery',
        'collect' => 'collect',
        'cooled_delivery' => 'cooled_delivery',
        'drop_off_at_postal_point' => 'drop_off_at_postal_point',
        'extra_assurance' => 'extra_assurance',
        'hide_sender' => 'hide_sender',
        'large_format' => 'large_format',
        'only_recipient' => 'only_recipient',
        'receipt_code' => 'receipt_code',
        'return' => 'return',
        'same_day_delivery' => 'same_day_delivery',
        'saturday_delivery' => 'saturday_delivery',
        'signature' => 'signature',
        'tracked' => 'tracked',
        'insurance' => 'insurance'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'age_check' => 'setAgeCheck',
        'cash_on_delivery' => 'setCashOnDelivery',
        'collect' => 'setCollect',
        'cooled_delivery' => 'setCooledDelivery',
        'drop_off_at_postal_point' => 'setDropOffAtPostalPoint',
        'extra_assurance' => 'setExtraAssurance',
        'hide_sender' => 'setHideSender',
        'large_format' => 'setLargeFormat',
        'only_recipient' => 'setOnlyRecipient',
        'receipt_code' => 'setReceiptCode',
        'return' => 'setReturn',
        'same_day_delivery' => 'setSameDayDelivery',
        'saturday_delivery' => 'setSaturdayDelivery',
        'signature' => 'setSignature',
        'tracked' => 'setTracked',
        'insurance' => 'setInsurance'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'age_check' => 'getAgeCheck',
        'cash_on_delivery' => 'getCashOnDelivery',
        'collect' => 'getCollect',
        'cooled_delivery' => 'getCooledDelivery',
        'drop_off_at_postal_point' => 'getDropOffAtPostalPoint',
        'extra_assurance' => 'getExtraAssurance',
        'hide_sender' => 'getHideSender',
        'large_format' => 'getLargeFormat',
        'only_recipient' => 'getOnlyRecipient',
        'receipt_code' => 'getReceiptCode',
        'return' => 'getReturn',
        'same_day_delivery' => 'getSameDayDelivery',
        'saturday_delivery' => 'getSaturdayDelivery',
        'signature' => 'getSignature',
        'tracked' => 'getTracked',
        'insurance' => 'getInsurance'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('age_check', $data ?? [], null);
        $this->setIfExists('cash_on_delivery', $data ?? [], null);
        $this->setIfExists('collect', $data ?? [], null);
        $this->setIfExists('cooled_delivery', $data ?? [], null);
        $this->setIfExists('drop_off_at_postal_point', $data ?? [], null);
        $this->setIfExists('extra_assurance', $data ?? [], null);
        $this->setIfExists('hide_sender', $data ?? [], null);
        $this->setIfExists('large_format', $data ?? [], null);
        $this->setIfExists('only_recipient', $data ?? [], null);
        $this->setIfExists('receipt_code', $data ?? [], null);
        $this->setIfExists('return', $data ?? [], null);
        $this->setIfExists('same_day_delivery', $data ?? [], null);
        $this->setIfExists('saturday_delivery', $data ?? [], null);
        $this->setIfExists('signature', $data ?? [], null);
        $this->setIfExists('tracked', $data ?? [], null);
        $this->setIfExists('insurance', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets age_check
     *
     * @return object|null
     */
    public function getAgeCheck()
    {
        return $this->container['age_check'];
    }

    /**
     * Sets age_check
     *
     * @param object|null $age_check Requires age verification option
     *
     * @return self
     */
    public function setAgeCheck($age_check)
    {
        if (is_null($age_check)) {
            throw new \InvalidArgumentException('non-nullable age_check cannot be null');
        }
        $this->container['age_check'] = $age_check;

        return $this;
    }

    /**
     * Gets cash_on_delivery
     *
     * @return object|null
     */
    public function getCashOnDelivery()
    {
        return $this->container['cash_on_delivery'];
    }

    /**
     * Sets cash_on_delivery
     *
     * @param object|null $cash_on_delivery Cash on delivery option
     *
     * @return self
     */
    public function setCashOnDelivery($cash_on_delivery)
    {
        if (is_null($cash_on_delivery)) {
            throw new \InvalidArgumentException('non-nullable cash_on_delivery cannot be null');
        }
        $this->container['cash_on_delivery'] = $cash_on_delivery;

        return $this;
    }

    /**
     * Gets collect
     *
     * @return object|null
     */
    public function getCollect()
    {
        return $this->container['collect'];
    }

    /**
     * Sets collect
     *
     * @param object|null $collect Scheduled collection option
     *
     * @return self
     */
    public function setCollect($collect)
    {
        if (is_null($collect)) {
            throw new \InvalidArgumentException('non-nullable collect cannot be null');
        }
        $this->container['collect'] = $collect;

        return $this;
    }

    /**
     * Gets cooled_delivery
     *
     * @return object|null
     */
    public function getCooledDelivery()
    {
        return $this->container['cooled_delivery'];
    }

    /**
     * Sets cooled_delivery
     *
     * @param object|null $cooled_delivery Cooled delivery option
     *
     * @return self
     */
    public function setCooledDelivery($cooled_delivery)
    {
        if (is_null($cooled_delivery)) {
            throw new \InvalidArgumentException('non-nullable cooled_delivery cannot be null');
        }
        $this->container['cooled_delivery'] = $cooled_delivery;

        return $this;
    }

    /**
     * Gets drop_off_at_postal_point
     *
     * @return object|null
     */
    public function getDropOffAtPostalPoint()
    {
        return $this->container['drop_off_at_postal_point'];
    }

    /**
     * Sets drop_off_at_postal_point
     *
     * @param object|null $drop_off_at_postal_point Deliver at postal point option
     *
     * @return self
     */
    public function setDropOffAtPostalPoint($drop_off_at_postal_point)
    {
        if (is_null($drop_off_at_postal_point)) {
            throw new \InvalidArgumentException('non-nullable drop_off_at_postal_point cannot be null');
        }
        $this->container['drop_off_at_postal_point'] = $drop_off_at_postal_point;

        return $this;
    }

    /**
     * Gets extra_assurance
     *
     * @return object|null
     */
    public function getExtraAssurance()
    {
        return $this->container['extra_assurance'];
    }

    /**
     * Sets extra_assurance
     *
     * @param object|null $extra_assurance Additional insurance option
     *
     * @return self
     */
    public function setExtraAssurance($extra_assurance)
    {
        if (is_null($extra_assurance)) {
            throw new \InvalidArgumentException('non-nullable extra_assurance cannot be null');
        }
        $this->container['extra_assurance'] = $extra_assurance;

        return $this;
    }

    /**
     * Gets hide_sender
     *
     * @return object|null
     */
    public function getHideSender()
    {
        return $this->container['hide_sender'];
    }

    /**
     * Sets hide_sender
     *
     * @param object|null $hide_sender Hide sender option
     *
     * @return self
     */
    public function setHideSender($hide_sender)
    {
        if (is_null($hide_sender)) {
            throw new \InvalidArgumentException('non-nullable hide_sender cannot be null');
        }
        $this->container['hide_sender'] = $hide_sender;

        return $this;
    }

    /**
     * Gets large_format
     *
     * @return object|null
     */
    public function getLargeFormat()
    {
        return $this->container['large_format'];
    }

    /**
     * Sets large_format
     *
     * @param object|null $large_format Oversized package option
     *
     * @return self
     */
    public function setLargeFormat($large_format)
    {
        if (is_null($large_format)) {
            throw new \InvalidArgumentException('non-nullable large_format cannot be null');
        }
        $this->container['large_format'] = $large_format;

        return $this;
    }

    /**
     * Gets only_recipient
     *
     * @return object|null
     */
    public function getOnlyRecipient()
    {
        return $this->container['only_recipient'];
    }

    /**
     * Sets only_recipient
     *
     * @param object|null $only_recipient Recipient only delivery option
     *
     * @return self
     */
    public function setOnlyRecipient($only_recipient)
    {
        if (is_null($only_recipient)) {
            throw new \InvalidArgumentException('non-nullable only_recipient cannot be null');
        }
        $this->container['only_recipient'] = $only_recipient;

        return $this;
    }

    /**
     * Gets receipt_code
     *
     * @return object|null
     */
    public function getReceiptCode()
    {
        return $this->container['receipt_code'];
    }

    /**
     * Sets receipt_code
     *
     * @param object|null $receipt_code Requires receipt code option
     *
     * @return self
     */
    public function setReceiptCode($receipt_code)
    {
        if (is_null($receipt_code)) {
            throw new \InvalidArgumentException('non-nullable receipt_code cannot be null');
        }
        $this->container['receipt_code'] = $receipt_code;

        return $this;
    }

    /**
     * Gets return
     *
     * @return object|null
     */
    public function getReturn()
    {
        return $this->container['return'];
    }

    /**
     * Sets return
     *
     * @param object|null $return Return on first failed delivery option
     *
     * @return self
     */
    public function setReturn($return)
    {
        if (is_null($return)) {
            throw new \InvalidArgumentException('non-nullable return cannot be null');
        }
        $this->container['return'] = $return;

        return $this;
    }

    /**
     * Gets same_day_delivery
     *
     * @return object|null
     */
    public function getSameDayDelivery()
    {
        return $this->container['same_day_delivery'];
    }

    /**
     * Sets same_day_delivery
     *
     * @param object|null $same_day_delivery Same day delivery option
     *
     * @return self
     */
    public function setSameDayDelivery($same_day_delivery)
    {
        if (is_null($same_day_delivery)) {
            throw new \InvalidArgumentException('non-nullable same_day_delivery cannot be null');
        }
        $this->container['same_day_delivery'] = $same_day_delivery;

        return $this;
    }

    /**
     * Gets saturday_delivery
     *
     * @return object|null
     */
    public function getSaturdayDelivery()
    {
        return $this->container['saturday_delivery'];
    }

    /**
     * Sets saturday_delivery
     *
     * @param object|null $saturday_delivery Saturday delivery option
     *
     * @return self
     */
    public function setSaturdayDelivery($saturday_delivery)
    {
        if (is_null($saturday_delivery)) {
            throw new \InvalidArgumentException('non-nullable saturday_delivery cannot be null');
        }
        $this->container['saturday_delivery'] = $saturday_delivery;

        return $this;
    }

    /**
     * Gets signature
     *
     * @return object|null
     */
    public function getSignature()
    {
        return $this->container['signature'];
    }

    /**
     * Sets signature
     *
     * @param object|null $signature Requires signature option
     *
     * @return self
     */
    public function setSignature($signature)
    {
        if (is_null($signature)) {
            throw new \InvalidArgumentException('non-nullable signature cannot be null');
        }
        $this->container['signature'] = $signature;

        return $this;
    }

    /**
     * Gets tracked
     *
     * @return object|null
     */
    public function getTracked()
    {
        return $this->container['tracked'];
    }

    /**
     * Sets tracked
     *
     * @param object|null $tracked Tracking option
     *
     * @return self
     */
    public function setTracked($tracked)
    {
        if (is_null($tracked)) {
            throw new \InvalidArgumentException('non-nullable tracked cannot be null');
        }
        $this->container['tracked'] = $tracked;

        return $this;
    }

    /**
     * Gets insurance
     *
     * @return object|null
     */
    public function getInsurance()
    {
        return $this->container['insurance'];
    }

    /**
     * Sets insurance
     *
     * @param object|null $insurance Insurance option
     *
     * @return self
     */
    public function setInsurance($insurance)
    {
        if (is_null($insurance)) {
            throw new \InvalidArgumentException('non-nullable insurance cannot be null');
        }
        $this->container['insurance'] = $insurance;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


