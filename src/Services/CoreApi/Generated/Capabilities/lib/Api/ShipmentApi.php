<?php
/**
 * ShipmentApi
 * PHP version 8.1
 *
 * @category Class
 * @package  MyParcel\CoreApi\Generated\Capabilities
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * MyParcel API
 *
 * Allows MyParcel users to query delivery options, pickup & drop off locations with opening hours, register & trace shipments, print labels and more.
 *
 * The version of the OpenAPI document: 2025-02-13
 * Contact: info@myparcel.nl
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.15.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MyParcel\CoreApi\Generated\Capabilities\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use MyParcel\CoreApi\Generated\Capabilities\ApiException;
use MyParcel\CoreApi\Generated\Capabilities\Configuration;
use MyParcel\CoreApi\Generated\Capabilities\FormDataProcessor;
use MyParcel\CoreApi\Generated\Capabilities\HeaderSelector;
use MyParcel\CoreApi\Generated\Capabilities\ObjectSerializer;

/**
 * ShipmentApi Class Doc Comment
 *
 * @category Class
 * @package  MyParcel\CoreApi\Generated\Capabilities
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ShipmentApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'getShipments' => [
            'application/json',
        ],
        'getShipmentsById' => [
            'application/json',
        ],
        'postCapabilities' => [
            'application/json;charset=utf-8;version=2.0',
            'application/json;charset=utf-8',
        ],
        'postShipments' => [
            'application/vnd.shipment+json;version=1.1',
            'application/vnd.shipment+json',
            'application/vnd.return_shipment+json',
            'application/vnd.unrelated_return_shipment+json',
        ],
        'putShipment' => [
            'application/vnd.shipment+json;version=1.1',
            'application/vnd.shipment+json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getShipments
     *
     * Gets a list of Shipments, optionally filtered using parameters.
     *
     * @param  string $user_agent To give us insight into where requests come from and API documentation usage, you should send a &#x60;User-Agent&#x60; header with all your requests. This header should include information about your integration, the CMS/platform and the backend you are using. (required)
     * @param  string|null $barcode barcode (optional)
     * @param  \MyParcel\CoreApi\Generated\Capabilities\Model\RefTypesCarrier|null $carrier_id carrier_id (optional)
     * @param  \DateTime|null $created When set, only resources created after this date will be returned. Inclusive. (optional)
     * @param  \MyParcel\CoreApi\Generated\Capabilities\Model\CommonParametersBoolean|null $delayed Filter on whether the current event code means the shipment has been delayed. (optional)
     * @param  \MyParcel\CoreApi\Generated\Capabilities\Model\CommonParametersFilterValidateBool|null $delivered delivered (optional)
     * @param  bool|null $dropoff_today Use this parameter to only show Shipments that need to be dropped off today. (optional)
     * @param  bool|null $filter_hidden_shops filter_hidden_shops (optional)
     * @param  \MyParcel\CoreApi\Generated\Capabilities\Model\CommonParametersFilterValidateBool|null $hidden hidden (optional)
     * @param  bool|null $link_consumer_portal link_consumer_portal (optional)
     * @param  \MyParcel\CoreApi\Generated\Capabilities\Model\CommonParametersOrder|null $order Specify whether the results should be sorted in ascending or descending order. (optional)
     * @param  \MyParcel\CoreApi\Generated\Capabilities\Model\ShipmentParametersPackageType|null $package_type Filter by Package Type. (optional)
     * @param  int|null $page Request a specific page of the results, used for paginated results. (optional)
     * @param  string|null $q If this parameter is provided results will be filtered by the provided query or keyword. (optional)
     * @param  string|null $reference_identifier Filter by &#x60;reference_identifier&#x60;, an optional arbitrary identifier to identify the Shipment. (optional)
     * @param  string|null $region The region, department, state or province of the address. (optional)
     * @param  \MyParcel\CoreApi\Generated\Capabilities\Model\ShipmentParametersShipmentType|null $shipment_type shipment_type (optional)
     * @param  \MyParcel\CoreApi\Generated\Capabilities\Model\CommonParametersIds|null $shop_id shop_id (optional)
     * @param  int|null $size Specify the number of resources returned per page, used for paginated results. (optional)
     * @param  \MyParcel\CoreApi\Generated\Capabilities\Model\ShipmentParametersSortShipment|null $sort Sort Shipment results by a particular resource field. (optional)
     * @param  \MyParcel\CoreApi\Generated\Capabilities\Model\ShipmentParametersStatus|null $status Filter by Shipment status. This filter will return only Shipments with the specified status. (optional)
     * @param  \MyParcel\CoreApi\Generated\Capabilities\Model\RefShipmentTransactionStatus|null $transaction_status transaction_status (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getShipments'] to see the possible values for this operation
     *
     * @throws \MyParcel\CoreApi\Generated\Capabilities\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \MyParcel\CoreApi\Generated\Capabilities\Model\ShipmentResponsesShipments|\MyParcel\CoreApi\Generated\Capabilities\Model\CommonResponsesUserError|\MyParcel\CoreApi\Generated\Capabilities\Model\CommonResponsesSystemError
     */
    public function getShipments($user_agent, $barcode = null, $carrier_id = null, $created = null, $delayed = null, $delivered = null, $dropoff_today = null, $filter_hidden_shops = null, $hidden = null, $link_consumer_portal = null, $order = null, $package_type = null, $page = null, $q = null, $reference_identifier = null, $region = null, $shipment_type = null, $shop_id = null, $size = null, $sort = null, $status = null, $transaction_status = null, string $contentType = self::contentTypes['getShipments'][0])
    {
        list($response) = $this->getShipmentsWithHttpInfo($user_agent, $barcode, $carrier_id, $created, $delayed, $delivered, $dropoff_today, $filter_hidden_shops, $hidden, $link_consumer_portal, $order, $package_type, $page, $q, $reference_identifier, $region, $shipment_type, $shop_id, $size, $sort, $status, $transaction_status, $contentType);
        return $response;
    }

    /**
     * Operation getShipmentsWithHttpInfo
     *
     * Gets a list of Shipments, optionally filtered using parameters.
     *
     * @param  string $user_agent To give us insight into where requests come from and API documentation usage, you should send a &#x60;User-Agent&#x60; header with all your requests. This header should include information about your integration, the CMS/platform and the backend you are using. (required)
     * @param  string|null $barcode (optional)
     * @param  \MyParcel\CoreApi\Generated\Capabilities\Model\RefTypesCarrier|null $carrier_id (optional)
     * @param  \DateTime|null $created When set, only resources created after this date will be returned. Inclusive. (optional)
     * @param  \MyParcel\CoreApi\Generated\Capabilities\Model\CommonParametersBoolean|null $delayed Filter on whether the current event code means the shipment has been delayed. (optional)
     * @param  \MyParcel\CoreApi\Generated\Capabilities\Model\CommonParametersFilterValidateBool|null $delivered (optional)
     * @param  bool|null $dropoff_today Use this parameter to only show Shipments that need to be dropped off today. (optional)
     * @param  bool|null $filter_hidden_shops (optional)
     * @param  \MyParcel\CoreApi\Generated\Capabilities\Model\CommonParametersFilterValidateBool|null $hidden (optional)
     * @param  bool|null $link_consumer_portal (optional)
     * @param  \MyParcel\CoreApi\Generated\Capabilities\Model\CommonParametersOrder|null $order Specify whether the results should be sorted in ascending or descending order. (optional)
     * @param  \MyParcel\CoreApi\Generated\Capabilities\Model\ShipmentParametersPackageType|null $package_type Filter by Package Type. (optional)
     * @param  int|null $page Request a specific page of the results, used for paginated results. (optional)
     * @param  string|null $q If this parameter is provided results will be filtered by the provided query or keyword. (optional)
     * @param  string|null $reference_identifier Filter by &#x60;reference_identifier&#x60;, an optional arbitrary identifier to identify the Shipment. (optional)
     * @param  string|null $region The region, department, state or province of the address. (optional)
     * @param  \MyParcel\CoreApi\Generated\Capabilities\Model\ShipmentParametersShipmentType|null $shipment_type (optional)
     * @param  \MyParcel\CoreApi\Generated\Capabilities\Model\CommonParametersIds|null $shop_id (optional)
     * @param  int|null $size Specify the number of resources returned per page, used for paginated results. (optional)
     * @param  \MyParcel\CoreApi\Generated\Capabilities\Model\ShipmentParametersSortShipment|null $sort Sort Shipment results by a particular resource field. (optional)
     * @param  \MyParcel\CoreApi\Generated\Capabilities\Model\ShipmentParametersStatus|null $status Filter by Shipment status. This filter will return only Shipments with the specified status. (optional)
     * @param  \MyParcel\CoreApi\Generated\Capabilities\Model\RefShipmentTransactionStatus|null $transaction_status (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getShipments'] to see the possible values for this operation
     *
     * @throws \MyParcel\CoreApi\Generated\Capabilities\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \MyParcel\CoreApi\Generated\Capabilities\Model\ShipmentResponsesShipments|\MyParcel\CoreApi\Generated\Capabilities\Model\CommonResponsesUserError|\MyParcel\CoreApi\Generated\Capabilities\Model\CommonResponsesSystemError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getShipmentsWithHttpInfo($user_agent, $barcode = null, $carrier_id = null, $created = null, $delayed = null, $delivered = null, $dropoff_today = null, $filter_hidden_shops = null, $hidden = null, $link_consumer_portal = null, $order = null, $package_type = null, $page = null, $q = null, $reference_identifier = null, $region = null, $shipment_type = null, $shop_id = null, $size = null, $sort = null, $status = null, $transaction_status = null, string $contentType = self::contentTypes['getShipments'][0])
    {
        $request = $this->getShipmentsRequest($user_agent, $barcode, $carrier_id, $created, $delayed, $delivered, $dropoff_today, $filter_hidden_shops, $hidden, $link_consumer_portal, $order, $package_type, $page, $q, $reference_identifier, $region, $shipment_type, $shop_id, $size, $sort, $status, $transaction_status, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\MyParcel\CoreApi\Generated\Capabilities\Model\ShipmentResponsesShipments',
                        $request,
                        $response,
                    );
                
                
            }

            if ($this->responseWithinRangeCode('4XX', $statusCode)) {
                return $this->handleResponseWithDataType(
                    '\MyParcel\CoreApi\Generated\Capabilities\Model\CommonResponsesUserError',
                    $request,
                    $response,
                );
            }if ($this->responseWithinRangeCode('5XX', $statusCode)) {
                return $this->handleResponseWithDataType(
                    '\MyParcel\CoreApi\Generated\Capabilities\Model\CommonResponsesSystemError',
                    $request,
                    $response,
                );
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\MyParcel\CoreApi\Generated\Capabilities\Model\ShipmentResponsesShipments',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MyParcel\CoreApi\Generated\Capabilities\Model\ShipmentResponsesShipments',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                
                
            }
        
            if ($this->responseWithinRangeCode('4XX', $e->getCode())) {
                $data = ObjectSerializer::deserialize(
                    $e->getResponseBody(),
                    '\MyParcel\CoreApi\Generated\Capabilities\Model\CommonResponsesUserError',
                    $e->getResponseHeaders()
                );
                $e->setResponseObject($data);
                throw $e;
            }
            if ($this->responseWithinRangeCode('5XX', $e->getCode())) {
                $data = ObjectSerializer::deserialize(
                    $e->getResponseBody(),
                    '\MyParcel\CoreApi\Generated\Capabilities\Model\CommonResponsesSystemError',
                    $e->getResponseHeaders()
                );
                $e->setResponseObject($data);
                throw $e;
            }

            throw $e;
        }
    }

    /**
     * Operation getShipmentsAsync
     *
     * Gets a list of Shipments, optionally filtered using parameters.
     *
     * @param  string $user_agent To give us insight into where requests come from and API documentation usage, you should send a &#x60;User-Agent&#x60; header with all your requests. This header should include information about your integration, the CMS/platform and the backend you are using. (required)
     * @param  string|null $barcode (optional)
     * @param  \MyParcel\CoreApi\Generated\Capabilities\Model\RefTypesCarrier|null $carrier_id (optional)
     * @param  \DateTime|null $created When set, only resources created after this date will be returned. Inclusive. (optional)
     * @param  \MyParcel\CoreApi\Generated\Capabilities\Model\CommonParametersBoolean|null $delayed Filter on whether the current event code means the shipment has been delayed. (optional)
     * @param  \MyParcel\CoreApi\Generated\Capabilities\Model\CommonParametersFilterValidateBool|null $delivered (optional)
     * @param  bool|null $dropoff_today Use this parameter to only show Shipments that need to be dropped off today. (optional)
     * @param  bool|null $filter_hidden_shops (optional)
     * @param  \MyParcel\CoreApi\Generated\Capabilities\Model\CommonParametersFilterValidateBool|null $hidden (optional)
     * @param  bool|null $link_consumer_portal (optional)
     * @param  \MyParcel\CoreApi\Generated\Capabilities\Model\CommonParametersOrder|null $order Specify whether the results should be sorted in ascending or descending order. (optional)
     * @param  \MyParcel\CoreApi\Generated\Capabilities\Model\ShipmentParametersPackageType|null $package_type Filter by Package Type. (optional)
     * @param  int|null $page Request a specific page of the results, used for paginated results. (optional)
     * @param  string|null $q If this parameter is provided results will be filtered by the provided query or keyword. (optional)
     * @param  string|null $reference_identifier Filter by &#x60;reference_identifier&#x60;, an optional arbitrary identifier to identify the Shipment. (optional)
     * @param  string|null $region The region, department, state or province of the address. (optional)
     * @param  \MyParcel\CoreApi\Generated\Capabilities\Model\ShipmentParametersShipmentType|null $shipment_type (optional)
     * @param  \MyParcel\CoreApi\Generated\Capabilities\Model\CommonParametersIds|null $shop_id (optional)
     * @param  int|null $size Specify the number of resources returned per page, used for paginated results. (optional)
     * @param  \MyParcel\CoreApi\Generated\Capabilities\Model\ShipmentParametersSortShipment|null $sort Sort Shipment results by a particular resource field. (optional)
     * @param  \MyParcel\CoreApi\Generated\Capabilities\Model\ShipmentParametersStatus|null $status Filter by Shipment status. This filter will return only Shipments with the specified status. (optional)
     * @param  \MyParcel\CoreApi\Generated\Capabilities\Model\RefShipmentTransactionStatus|null $transaction_status (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getShipments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getShipmentsAsync($user_agent, $barcode = null, $carrier_id = null, $created = null, $delayed = null, $delivered = null, $dropoff_today = null, $filter_hidden_shops = null, $hidden = null, $link_consumer_portal = null, $order = null, $package_type = null, $page = null, $q = null, $reference_identifier = null, $region = null, $shipment_type = null, $shop_id = null, $size = null, $sort = null, $status = null, $transaction_status = null, string $contentType = self::contentTypes['getShipments'][0])
    {
        return $this->getShipmentsAsyncWithHttpInfo($user_agent, $barcode, $carrier_id, $created, $delayed, $delivered, $dropoff_today, $filter_hidden_shops, $hidden, $link_consumer_portal, $order, $package_type, $page, $q, $reference_identifier, $region, $shipment_type, $shop_id, $size, $sort, $status, $transaction_status, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getShipmentsAsyncWithHttpInfo
     *
     * Gets a list of Shipments, optionally filtered using parameters.
     *
     * @param  string $user_agent To give us insight into where requests come from and API documentation usage, you should send a &#x60;User-Agent&#x60; header with all your requests. This header should include information about your integration, the CMS/platform and the backend you are using. (required)
     * @param  string|null $barcode (optional)
     * @param  \MyParcel\CoreApi\Generated\Capabilities\Model\RefTypesCarrier|null $carrier_id (optional)
     * @param  \DateTime|null $created When set, only resources created after this date will be returned. Inclusive. (optional)
     * @param  \MyParcel\CoreApi\Generated\Capabilities\Model\CommonParametersBoolean|null $delayed Filter on whether the current event code means the shipment has been delayed. (optional)
     * @param  \MyParcel\CoreApi\Generated\Capabilities\Model\CommonParametersFilterValidateBool|null $delivered (optional)
     * @param  bool|null $dropoff_today Use this parameter to only show Shipments that need to be dropped off today. (optional)
     * @param  bool|null $filter_hidden_shops (optional)
     * @param  \MyParcel\CoreApi\Generated\Capabilities\Model\CommonParametersFilterValidateBool|null $hidden (optional)
     * @param  bool|null $link_consumer_portal (optional)
     * @param  \MyParcel\CoreApi\Generated\Capabilities\Model\CommonParametersOrder|null $order Specify whether the results should be sorted in ascending or descending order. (optional)
     * @param  \MyParcel\CoreApi\Generated\Capabilities\Model\ShipmentParametersPackageType|null $package_type Filter by Package Type. (optional)
     * @param  int|null $page Request a specific page of the results, used for paginated results. (optional)
     * @param  string|null $q If this parameter is provided results will be filtered by the provided query or keyword. (optional)
     * @param  string|null $reference_identifier Filter by &#x60;reference_identifier&#x60;, an optional arbitrary identifier to identify the Shipment. (optional)
     * @param  string|null $region The region, department, state or province of the address. (optional)
     * @param  \MyParcel\CoreApi\Generated\Capabilities\Model\ShipmentParametersShipmentType|null $shipment_type (optional)
     * @param  \MyParcel\CoreApi\Generated\Capabilities\Model\CommonParametersIds|null $shop_id (optional)
     * @param  int|null $size Specify the number of resources returned per page, used for paginated results. (optional)
     * @param  \MyParcel\CoreApi\Generated\Capabilities\Model\ShipmentParametersSortShipment|null $sort Sort Shipment results by a particular resource field. (optional)
     * @param  \MyParcel\CoreApi\Generated\Capabilities\Model\ShipmentParametersStatus|null $status Filter by Shipment status. This filter will return only Shipments with the specified status. (optional)
     * @param  \MyParcel\CoreApi\Generated\Capabilities\Model\RefShipmentTransactionStatus|null $transaction_status (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getShipments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getShipmentsAsyncWithHttpInfo($user_agent, $barcode = null, $carrier_id = null, $created = null, $delayed = null, $delivered = null, $dropoff_today = null, $filter_hidden_shops = null, $hidden = null, $link_consumer_portal = null, $order = null, $package_type = null, $page = null, $q = null, $reference_identifier = null, $region = null, $shipment_type = null, $shop_id = null, $size = null, $sort = null, $status = null, $transaction_status = null, string $contentType = self::contentTypes['getShipments'][0])
    {
        $returnType = '\MyParcel\CoreApi\Generated\Capabilities\Model\ShipmentResponsesShipments';
        $request = $this->getShipmentsRequest($user_agent, $barcode, $carrier_id, $created, $delayed, $delivered, $dropoff_today, $filter_hidden_shops, $hidden, $link_consumer_portal, $order, $package_type, $page, $q, $reference_identifier, $region, $shipment_type, $shop_id, $size, $sort, $status, $transaction_status, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getShipments'
     *
     * @param  string $user_agent To give us insight into where requests come from and API documentation usage, you should send a &#x60;User-Agent&#x60; header with all your requests. This header should include information about your integration, the CMS/platform and the backend you are using. (required)
     * @param  string|null $barcode (optional)
     * @param  \MyParcel\CoreApi\Generated\Capabilities\Model\RefTypesCarrier|null $carrier_id (optional)
     * @param  \DateTime|null $created When set, only resources created after this date will be returned. Inclusive. (optional)
     * @param  \MyParcel\CoreApi\Generated\Capabilities\Model\CommonParametersBoolean|null $delayed Filter on whether the current event code means the shipment has been delayed. (optional)
     * @param  \MyParcel\CoreApi\Generated\Capabilities\Model\CommonParametersFilterValidateBool|null $delivered (optional)
     * @param  bool|null $dropoff_today Use this parameter to only show Shipments that need to be dropped off today. (optional)
     * @param  bool|null $filter_hidden_shops (optional)
     * @param  \MyParcel\CoreApi\Generated\Capabilities\Model\CommonParametersFilterValidateBool|null $hidden (optional)
     * @param  bool|null $link_consumer_portal (optional)
     * @param  \MyParcel\CoreApi\Generated\Capabilities\Model\CommonParametersOrder|null $order Specify whether the results should be sorted in ascending or descending order. (optional)
     * @param  \MyParcel\CoreApi\Generated\Capabilities\Model\ShipmentParametersPackageType|null $package_type Filter by Package Type. (optional)
     * @param  int|null $page Request a specific page of the results, used for paginated results. (optional)
     * @param  string|null $q If this parameter is provided results will be filtered by the provided query or keyword. (optional)
     * @param  string|null $reference_identifier Filter by &#x60;reference_identifier&#x60;, an optional arbitrary identifier to identify the Shipment. (optional)
     * @param  string|null $region The region, department, state or province of the address. (optional)
     * @param  \MyParcel\CoreApi\Generated\Capabilities\Model\ShipmentParametersShipmentType|null $shipment_type (optional)
     * @param  \MyParcel\CoreApi\Generated\Capabilities\Model\CommonParametersIds|null $shop_id (optional)
     * @param  int|null $size Specify the number of resources returned per page, used for paginated results. (optional)
     * @param  \MyParcel\CoreApi\Generated\Capabilities\Model\ShipmentParametersSortShipment|null $sort Sort Shipment results by a particular resource field. (optional)
     * @param  \MyParcel\CoreApi\Generated\Capabilities\Model\ShipmentParametersStatus|null $status Filter by Shipment status. This filter will return only Shipments with the specified status. (optional)
     * @param  \MyParcel\CoreApi\Generated\Capabilities\Model\RefShipmentTransactionStatus|null $transaction_status (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getShipments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getShipmentsRequest($user_agent, $barcode = null, $carrier_id = null, $created = null, $delayed = null, $delivered = null, $dropoff_today = null, $filter_hidden_shops = null, $hidden = null, $link_consumer_portal = null, $order = null, $package_type = null, $page = null, $q = null, $reference_identifier = null, $region = null, $shipment_type = null, $shop_id = null, $size = null, $sort = null, $status = null, $transaction_status = null, string $contentType = self::contentTypes['getShipments'][0])
    {

        // verify the required parameter 'user_agent' is set
        if ($user_agent === null || (is_array($user_agent) && count($user_agent) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_agent when calling getShipments'
            );
        }












        if ($page !== null && $page > 1000) {
            throw new \InvalidArgumentException('invalid value for "$page" when calling ShipmentApi.getShipments, must be smaller than or equal to 1000.');
        }
        if ($page !== null && $page < 1) {
            throw new \InvalidArgumentException('invalid value for "$page" when calling ShipmentApi.getShipments, must be bigger than or equal to 1.');
        }
        





        if ($size !== null && $size > 10000) {
            throw new \InvalidArgumentException('invalid value for "$size" when calling ShipmentApi.getShipments, must be smaller than or equal to 10000.');
        }
        if ($size !== null && $size < 1) {
            throw new \InvalidArgumentException('invalid value for "$size" when calling ShipmentApi.getShipments, must be bigger than or equal to 1.');
        }
        




        $resourcePath = '/shipments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $barcode,
            'barcode', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $carrier_id,
            'carrier_id', // param base name
            'RefTypesCarrier', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $created,
            'created', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $delayed,
            'delayed', // param base name
            'anyOf&lt;boolean,integer,number,number,string&gt;', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $delivered,
            'delivered', // param base name
            'anyOf&lt;common_parameters_boolean,string&gt;', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $dropoff_today,
            'dropoff_today', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_hidden_shops,
            'filter_hidden_shops', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $hidden,
            'hidden', // param base name
            'anyOf&lt;common_parameters_boolean,string&gt;', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $link_consumer_portal,
            'link_consumer_portal', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order,
            'order', // param base name
            'CommonParametersOrder', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $package_type,
            'package_type', // param base name
            'anyOf&lt;_ref_shipment_package_type,array,string&gt;', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $q,
            'q', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $reference_identifier,
            'reference_identifier', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $region,
            'region', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $shipment_type,
            'shipment_type', // param base name
            'anyOf&lt;_ref_shipment_type,array,string&gt;', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $shop_id,
            'shop_id', // param base name
            'anyOf&lt;integer,array,string&gt;', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $size,
            'size', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'ShipmentParametersSortShipment', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $status,
            'status', // param base name
            '\MyParcel\CoreApi\Generated\Capabilities\Model\RefShipmentStatus|\MyParcel\CoreApi\Generated\Capabilities\Model\RefShipmentStatus[]|string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $transaction_status,
            'transaction_status', // param base name
            'RefShipmentTransactionStatus', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($user_agent !== null) {
            $headerParams['User-Agent'] = ObjectSerializer::toHeaderValue($user_agent);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getShipmentsById
     *
     * Get shipments by id.
     *
     * @param  \MyParcel\CoreApi\Generated\Capabilities\Model\CommonParametersBigids $ids One or more shipment IDs. Separate multiple shipment IDs using &#x60;;&#x60;. (required)
     * @param  string $user_agent To give us insight into where requests come from and API documentation usage, you should send a &#x60;User-Agent&#x60; header with all your requests. This header should include information about your integration, the CMS/platform and the backend you are using. (required)
     * @param  bool|null $link_consumer_portal link_consumer_portal (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getShipmentsById'] to see the possible values for this operation
     *
     * @throws \MyParcel\CoreApi\Generated\Capabilities\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \MyParcel\CoreApi\Generated\Capabilities\Model\ShipmentResponsesShipments|\MyParcel\CoreApi\Generated\Capabilities\Model\CommonResponsesUserError|\MyParcel\CoreApi\Generated\Capabilities\Model\CommonResponsesSystemError
     */
    public function getShipmentsById($ids, $user_agent, $link_consumer_portal = null, string $contentType = self::contentTypes['getShipmentsById'][0])
    {
        list($response) = $this->getShipmentsByIdWithHttpInfo($ids, $user_agent, $link_consumer_portal, $contentType);
        return $response;
    }

    /**
     * Operation getShipmentsByIdWithHttpInfo
     *
     * Get shipments by id.
     *
     * @param  \MyParcel\CoreApi\Generated\Capabilities\Model\CommonParametersBigids $ids One or more shipment IDs. Separate multiple shipment IDs using &#x60;;&#x60;. (required)
     * @param  string $user_agent To give us insight into where requests come from and API documentation usage, you should send a &#x60;User-Agent&#x60; header with all your requests. This header should include information about your integration, the CMS/platform and the backend you are using. (required)
     * @param  bool|null $link_consumer_portal (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getShipmentsById'] to see the possible values for this operation
     *
     * @throws \MyParcel\CoreApi\Generated\Capabilities\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \MyParcel\CoreApi\Generated\Capabilities\Model\ShipmentResponsesShipments|\MyParcel\CoreApi\Generated\Capabilities\Model\CommonResponsesUserError|\MyParcel\CoreApi\Generated\Capabilities\Model\CommonResponsesSystemError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getShipmentsByIdWithHttpInfo($ids, $user_agent, $link_consumer_portal = null, string $contentType = self::contentTypes['getShipmentsById'][0])
    {
        $request = $this->getShipmentsByIdRequest($ids, $user_agent, $link_consumer_portal, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\MyParcel\CoreApi\Generated\Capabilities\Model\ShipmentResponsesShipments',
                        $request,
                        $response,
                    );
                
                
            }

            if ($this->responseWithinRangeCode('4XX', $statusCode)) {
                return $this->handleResponseWithDataType(
                    '\MyParcel\CoreApi\Generated\Capabilities\Model\CommonResponsesUserError',
                    $request,
                    $response,
                );
            }if ($this->responseWithinRangeCode('5XX', $statusCode)) {
                return $this->handleResponseWithDataType(
                    '\MyParcel\CoreApi\Generated\Capabilities\Model\CommonResponsesSystemError',
                    $request,
                    $response,
                );
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\MyParcel\CoreApi\Generated\Capabilities\Model\ShipmentResponsesShipments',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MyParcel\CoreApi\Generated\Capabilities\Model\ShipmentResponsesShipments',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                
                
            }
        
            if ($this->responseWithinRangeCode('4XX', $e->getCode())) {
                $data = ObjectSerializer::deserialize(
                    $e->getResponseBody(),
                    '\MyParcel\CoreApi\Generated\Capabilities\Model\CommonResponsesUserError',
                    $e->getResponseHeaders()
                );
                $e->setResponseObject($data);
                throw $e;
            }
            if ($this->responseWithinRangeCode('5XX', $e->getCode())) {
                $data = ObjectSerializer::deserialize(
                    $e->getResponseBody(),
                    '\MyParcel\CoreApi\Generated\Capabilities\Model\CommonResponsesSystemError',
                    $e->getResponseHeaders()
                );
                $e->setResponseObject($data);
                throw $e;
            }

            throw $e;
        }
    }

    /**
     * Operation getShipmentsByIdAsync
     *
     * Get shipments by id.
     *
     * @param  \MyParcel\CoreApi\Generated\Capabilities\Model\CommonParametersBigids $ids One or more shipment IDs. Separate multiple shipment IDs using &#x60;;&#x60;. (required)
     * @param  string $user_agent To give us insight into where requests come from and API documentation usage, you should send a &#x60;User-Agent&#x60; header with all your requests. This header should include information about your integration, the CMS/platform and the backend you are using. (required)
     * @param  bool|null $link_consumer_portal (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getShipmentsById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getShipmentsByIdAsync($ids, $user_agent, $link_consumer_portal = null, string $contentType = self::contentTypes['getShipmentsById'][0])
    {
        return $this->getShipmentsByIdAsyncWithHttpInfo($ids, $user_agent, $link_consumer_portal, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getShipmentsByIdAsyncWithHttpInfo
     *
     * Get shipments by id.
     *
     * @param  \MyParcel\CoreApi\Generated\Capabilities\Model\CommonParametersBigids $ids One or more shipment IDs. Separate multiple shipment IDs using &#x60;;&#x60;. (required)
     * @param  string $user_agent To give us insight into where requests come from and API documentation usage, you should send a &#x60;User-Agent&#x60; header with all your requests. This header should include information about your integration, the CMS/platform and the backend you are using. (required)
     * @param  bool|null $link_consumer_portal (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getShipmentsById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getShipmentsByIdAsyncWithHttpInfo($ids, $user_agent, $link_consumer_portal = null, string $contentType = self::contentTypes['getShipmentsById'][0])
    {
        $returnType = '\MyParcel\CoreApi\Generated\Capabilities\Model\ShipmentResponsesShipments';
        $request = $this->getShipmentsByIdRequest($ids, $user_agent, $link_consumer_portal, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getShipmentsById'
     *
     * @param  \MyParcel\CoreApi\Generated\Capabilities\Model\CommonParametersBigids $ids One or more shipment IDs. Separate multiple shipment IDs using &#x60;;&#x60;. (required)
     * @param  string $user_agent To give us insight into where requests come from and API documentation usage, you should send a &#x60;User-Agent&#x60; header with all your requests. This header should include information about your integration, the CMS/platform and the backend you are using. (required)
     * @param  bool|null $link_consumer_portal (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getShipmentsById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getShipmentsByIdRequest($ids, $user_agent, $link_consumer_portal = null, string $contentType = self::contentTypes['getShipmentsById'][0])
    {

        // verify the required parameter 'ids' is set
        if ($ids === null || (is_array($ids) && count($ids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ids when calling getShipmentsById'
            );
        }

        // verify the required parameter 'user_agent' is set
        if ($user_agent === null || (is_array($user_agent) && count($user_agent) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_agent when calling getShipmentsById'
            );
        }



        $resourcePath = '/shipments/{ids}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $link_consumer_portal,
            'link_consumer_portal', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($user_agent !== null) {
            $headerParams['User-Agent'] = ObjectSerializer::toHeaderValue($user_agent);
        }

        // path params
        if ($ids !== null) {
            $resourcePath = str_replace(
                '{' . 'ids' . '}',
                ObjectSerializer::toPathValue($ids),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postCapabilities
     *
     * List shipment capabilities
     *
     * @param  string $user_agent To give us insight into where requests come from and API documentation usage, you should send a &#x60;User-Agent&#x60; header with all your requests. This header should include information about your integration, the CMS/platform and the backend you are using. (required)
     * @param  \MyParcel\CoreApi\Generated\Capabilities\Model\CapabilitiesPostCapabilitiesRequestV2 $capabilities_post_capabilities_request_v2 Request body for capabilities endpoint. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postCapabilities'] to see the possible values for this operation
     *
     * @throws \MyParcel\CoreApi\Generated\Capabilities\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \MyParcel\CoreApi\Generated\Capabilities\Model\CapabilitiesResponsesCapabilitiesV2|\MyParcel\CoreApi\Generated\Capabilities\Model\CommonResponsesUserErrorInvalidContentType|\MyParcel\CoreApi\Generated\Capabilities\Model\CommonResponsesUserError|\MyParcel\CoreApi\Generated\Capabilities\Model\CommonResponsesSystemError
     */
    public function postCapabilities($user_agent, $capabilities_post_capabilities_request_v2, string $contentType = self::contentTypes['postCapabilities'][0])
    {
        list($response) = $this->postCapabilitiesWithHttpInfo($user_agent, $capabilities_post_capabilities_request_v2, $contentType);
        return $response;
    }

    /**
     * Operation postCapabilitiesWithHttpInfo
     *
     * List shipment capabilities
     *
     * @param  string $user_agent To give us insight into where requests come from and API documentation usage, you should send a &#x60;User-Agent&#x60; header with all your requests. This header should include information about your integration, the CMS/platform and the backend you are using. (required)
     * @param  \MyParcel\CoreApi\Generated\Capabilities\Model\CapabilitiesPostCapabilitiesRequestV2 $capabilities_post_capabilities_request_v2 Request body for capabilities endpoint. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postCapabilities'] to see the possible values for this operation
     *
     * @throws \MyParcel\CoreApi\Generated\Capabilities\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \MyParcel\CoreApi\Generated\Capabilities\Model\CapabilitiesResponsesCapabilitiesV2|\MyParcel\CoreApi\Generated\Capabilities\Model\CommonResponsesUserErrorInvalidContentType|\MyParcel\CoreApi\Generated\Capabilities\Model\CommonResponsesUserError|\MyParcel\CoreApi\Generated\Capabilities\Model\CommonResponsesSystemError, HTTP status code, HTTP response headers (array of strings)
     */
    public function postCapabilitiesWithHttpInfo($user_agent, $capabilities_post_capabilities_request_v2, string $contentType = self::contentTypes['postCapabilities'][0])
    {
        $request = $this->postCapabilitiesRequest($user_agent, $capabilities_post_capabilities_request_v2, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\MyParcel\CoreApi\Generated\Capabilities\Model\CapabilitiesResponsesCapabilitiesV2',
                        $request,
                        $response,
                    );
                case 415:
                    return $this->handleResponseWithDataType(
                        '\MyParcel\CoreApi\Generated\Capabilities\Model\CommonResponsesUserErrorInvalidContentType',
                        $request,
                        $response,
                    );
                
                
            }

            if ($this->responseWithinRangeCode('4XX', $statusCode)) {
                return $this->handleResponseWithDataType(
                    '\MyParcel\CoreApi\Generated\Capabilities\Model\CommonResponsesUserError',
                    $request,
                    $response,
                );
            }if ($this->responseWithinRangeCode('5XX', $statusCode)) {
                return $this->handleResponseWithDataType(
                    '\MyParcel\CoreApi\Generated\Capabilities\Model\CommonResponsesSystemError',
                    $request,
                    $response,
                );
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\MyParcel\CoreApi\Generated\Capabilities\Model\CapabilitiesResponsesCapabilitiesV2',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MyParcel\CoreApi\Generated\Capabilities\Model\CapabilitiesResponsesCapabilitiesV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MyParcel\CoreApi\Generated\Capabilities\Model\CommonResponsesUserErrorInvalidContentType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                
                
            }
        
            if ($this->responseWithinRangeCode('4XX', $e->getCode())) {
                $data = ObjectSerializer::deserialize(
                    $e->getResponseBody(),
                    '\MyParcel\CoreApi\Generated\Capabilities\Model\CommonResponsesUserError',
                    $e->getResponseHeaders()
                );
                $e->setResponseObject($data);
                throw $e;
            }
            if ($this->responseWithinRangeCode('5XX', $e->getCode())) {
                $data = ObjectSerializer::deserialize(
                    $e->getResponseBody(),
                    '\MyParcel\CoreApi\Generated\Capabilities\Model\CommonResponsesSystemError',
                    $e->getResponseHeaders()
                );
                $e->setResponseObject($data);
                throw $e;
            }

            throw $e;
        }
    }

    /**
     * Operation postCapabilitiesAsync
     *
     * List shipment capabilities
     *
     * @param  string $user_agent To give us insight into where requests come from and API documentation usage, you should send a &#x60;User-Agent&#x60; header with all your requests. This header should include information about your integration, the CMS/platform and the backend you are using. (required)
     * @param  \MyParcel\CoreApi\Generated\Capabilities\Model\CapabilitiesPostCapabilitiesRequestV2 $capabilities_post_capabilities_request_v2 Request body for capabilities endpoint. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postCapabilities'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postCapabilitiesAsync($user_agent, $capabilities_post_capabilities_request_v2, string $contentType = self::contentTypes['postCapabilities'][0])
    {
        return $this->postCapabilitiesAsyncWithHttpInfo($user_agent, $capabilities_post_capabilities_request_v2, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postCapabilitiesAsyncWithHttpInfo
     *
     * List shipment capabilities
     *
     * @param  string $user_agent To give us insight into where requests come from and API documentation usage, you should send a &#x60;User-Agent&#x60; header with all your requests. This header should include information about your integration, the CMS/platform and the backend you are using. (required)
     * @param  \MyParcel\CoreApi\Generated\Capabilities\Model\CapabilitiesPostCapabilitiesRequestV2 $capabilities_post_capabilities_request_v2 Request body for capabilities endpoint. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postCapabilities'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postCapabilitiesAsyncWithHttpInfo($user_agent, $capabilities_post_capabilities_request_v2, string $contentType = self::contentTypes['postCapabilities'][0])
    {
        $returnType = '\MyParcel\CoreApi\Generated\Capabilities\Model\CapabilitiesResponsesCapabilitiesV2';
        $request = $this->postCapabilitiesRequest($user_agent, $capabilities_post_capabilities_request_v2, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postCapabilities'
     *
     * @param  string $user_agent To give us insight into where requests come from and API documentation usage, you should send a &#x60;User-Agent&#x60; header with all your requests. This header should include information about your integration, the CMS/platform and the backend you are using. (required)
     * @param  \MyParcel\CoreApi\Generated\Capabilities\Model\CapabilitiesPostCapabilitiesRequestV2 $capabilities_post_capabilities_request_v2 Request body for capabilities endpoint. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postCapabilities'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postCapabilitiesRequest($user_agent, $capabilities_post_capabilities_request_v2, string $contentType = self::contentTypes['postCapabilities'][0])
    {

        // verify the required parameter 'user_agent' is set
        if ($user_agent === null || (is_array($user_agent) && count($user_agent) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_agent when calling postCapabilities'
            );
        }

        // verify the required parameter 'capabilities_post_capabilities_request_v2' is set
        if ($capabilities_post_capabilities_request_v2 === null || (is_array($capabilities_post_capabilities_request_v2) && count($capabilities_post_capabilities_request_v2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $capabilities_post_capabilities_request_v2 when calling postCapabilities'
            );
        }


        $resourcePath = '/shipments/capabilities';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($user_agent !== null) {
            $headerParams['User-Agent'] = ObjectSerializer::toHeaderValue($user_agent);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json;charset=utf-8;version=2.0', 'application/json;charset=utf-8', 'application/*', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($capabilities_post_capabilities_request_v2)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($capabilities_post_capabilities_request_v2));
            } else {
                $httpBody = $capabilities_post_capabilities_request_v2;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postShipments
     *
     * Add Shipment
     *
     * @param  string $user_agent To give us insight into where requests come from and API documentation usage, you should send a &#x60;User-Agent&#x60; header with all your requests. This header should include information about your integration, the CMS/platform and the backend you are using. (required)
     * @param  \MyParcel\CoreApi\Generated\Capabilities\Model\ShipmentPostShipmentsRequestV11 $shipment_post_shipments_request_v11 Array of Shipment objects. (required)
     * @param  \MyParcel\CoreApi\Generated\Capabilities\Model\ShipmentParametersPaperSize|null $format The size of a paper as specified in ISO216. (optional)
     * @param  \MyParcel\CoreApi\Generated\Capabilities\Model\ShipmentParametersLabelPosition|null $positions The position of the label on an A4 sheet. You can specify multiple positions by semicolon separating them on the URI. Positioning is only applied on the first page with labels. All subsequent pages will use the default positioning 1,2,3,4. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postShipments'] to see the possible values for this operation
     *
     * @throws \MyParcel\CoreApi\Generated\Capabilities\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \MyParcel\CoreApi\Generated\Capabilities\Model\ShipmentResponsesShipmentIds|\MyParcel\CoreApi\Generated\Capabilities\Model\CommonResponsesUserErrorInvalidContentType|\MyParcel\CoreApi\Generated\Capabilities\Model\CommonResponsesUserError|\MyParcel\CoreApi\Generated\Capabilities\Model\CommonResponsesSystemError
     */
    public function postShipments($user_agent, $shipment_post_shipments_request_v11, $format = null, $positions = null, string $contentType = self::contentTypes['postShipments'][0])
    {
        list($response) = $this->postShipmentsWithHttpInfo($user_agent, $shipment_post_shipments_request_v11, $format, $positions, $contentType);
        return $response;
    }

    /**
     * Operation postShipmentsWithHttpInfo
     *
     * Add Shipment
     *
     * @param  string $user_agent To give us insight into where requests come from and API documentation usage, you should send a &#x60;User-Agent&#x60; header with all your requests. This header should include information about your integration, the CMS/platform and the backend you are using. (required)
     * @param  \MyParcel\CoreApi\Generated\Capabilities\Model\ShipmentPostShipmentsRequestV11 $shipment_post_shipments_request_v11 Array of Shipment objects. (required)
     * @param  \MyParcel\CoreApi\Generated\Capabilities\Model\ShipmentParametersPaperSize|null $format The size of a paper as specified in ISO216. (optional)
     * @param  \MyParcel\CoreApi\Generated\Capabilities\Model\ShipmentParametersLabelPosition|null $positions The position of the label on an A4 sheet. You can specify multiple positions by semicolon separating them on the URI. Positioning is only applied on the first page with labels. All subsequent pages will use the default positioning 1,2,3,4. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postShipments'] to see the possible values for this operation
     *
     * @throws \MyParcel\CoreApi\Generated\Capabilities\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \MyParcel\CoreApi\Generated\Capabilities\Model\ShipmentResponsesShipmentIds|\MyParcel\CoreApi\Generated\Capabilities\Model\CommonResponsesUserErrorInvalidContentType|\MyParcel\CoreApi\Generated\Capabilities\Model\CommonResponsesUserError|\MyParcel\CoreApi\Generated\Capabilities\Model\CommonResponsesSystemError, HTTP status code, HTTP response headers (array of strings)
     */
    public function postShipmentsWithHttpInfo($user_agent, $shipment_post_shipments_request_v11, $format = null, $positions = null, string $contentType = self::contentTypes['postShipments'][0])
    {
        $request = $this->postShipmentsRequest($user_agent, $shipment_post_shipments_request_v11, $format, $positions, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\MyParcel\CoreApi\Generated\Capabilities\Model\ShipmentResponsesShipmentIds',
                        $request,
                        $response,
                    );
                case 415:
                    return $this->handleResponseWithDataType(
                        '\MyParcel\CoreApi\Generated\Capabilities\Model\CommonResponsesUserErrorInvalidContentType',
                        $request,
                        $response,
                    );
                
                
            }

            if ($this->responseWithinRangeCode('4XX', $statusCode)) {
                return $this->handleResponseWithDataType(
                    '\MyParcel\CoreApi\Generated\Capabilities\Model\CommonResponsesUserError',
                    $request,
                    $response,
                );
            }if ($this->responseWithinRangeCode('5XX', $statusCode)) {
                return $this->handleResponseWithDataType(
                    '\MyParcel\CoreApi\Generated\Capabilities\Model\CommonResponsesSystemError',
                    $request,
                    $response,
                );
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\MyParcel\CoreApi\Generated\Capabilities\Model\ShipmentResponsesShipmentIds',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MyParcel\CoreApi\Generated\Capabilities\Model\ShipmentResponsesShipmentIds',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MyParcel\CoreApi\Generated\Capabilities\Model\CommonResponsesUserErrorInvalidContentType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                
                
            }
        
            if ($this->responseWithinRangeCode('4XX', $e->getCode())) {
                $data = ObjectSerializer::deserialize(
                    $e->getResponseBody(),
                    '\MyParcel\CoreApi\Generated\Capabilities\Model\CommonResponsesUserError',
                    $e->getResponseHeaders()
                );
                $e->setResponseObject($data);
                throw $e;
            }
            if ($this->responseWithinRangeCode('5XX', $e->getCode())) {
                $data = ObjectSerializer::deserialize(
                    $e->getResponseBody(),
                    '\MyParcel\CoreApi\Generated\Capabilities\Model\CommonResponsesSystemError',
                    $e->getResponseHeaders()
                );
                $e->setResponseObject($data);
                throw $e;
            }

            throw $e;
        }
    }

    /**
     * Operation postShipmentsAsync
     *
     * Add Shipment
     *
     * @param  string $user_agent To give us insight into where requests come from and API documentation usage, you should send a &#x60;User-Agent&#x60; header with all your requests. This header should include information about your integration, the CMS/platform and the backend you are using. (required)
     * @param  \MyParcel\CoreApi\Generated\Capabilities\Model\ShipmentPostShipmentsRequestV11 $shipment_post_shipments_request_v11 Array of Shipment objects. (required)
     * @param  \MyParcel\CoreApi\Generated\Capabilities\Model\ShipmentParametersPaperSize|null $format The size of a paper as specified in ISO216. (optional)
     * @param  \MyParcel\CoreApi\Generated\Capabilities\Model\ShipmentParametersLabelPosition|null $positions The position of the label on an A4 sheet. You can specify multiple positions by semicolon separating them on the URI. Positioning is only applied on the first page with labels. All subsequent pages will use the default positioning 1,2,3,4. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postShipments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postShipmentsAsync($user_agent, $shipment_post_shipments_request_v11, $format = null, $positions = null, string $contentType = self::contentTypes['postShipments'][0])
    {
        return $this->postShipmentsAsyncWithHttpInfo($user_agent, $shipment_post_shipments_request_v11, $format, $positions, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postShipmentsAsyncWithHttpInfo
     *
     * Add Shipment
     *
     * @param  string $user_agent To give us insight into where requests come from and API documentation usage, you should send a &#x60;User-Agent&#x60; header with all your requests. This header should include information about your integration, the CMS/platform and the backend you are using. (required)
     * @param  \MyParcel\CoreApi\Generated\Capabilities\Model\ShipmentPostShipmentsRequestV11 $shipment_post_shipments_request_v11 Array of Shipment objects. (required)
     * @param  \MyParcel\CoreApi\Generated\Capabilities\Model\ShipmentParametersPaperSize|null $format The size of a paper as specified in ISO216. (optional)
     * @param  \MyParcel\CoreApi\Generated\Capabilities\Model\ShipmentParametersLabelPosition|null $positions The position of the label on an A4 sheet. You can specify multiple positions by semicolon separating them on the URI. Positioning is only applied on the first page with labels. All subsequent pages will use the default positioning 1,2,3,4. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postShipments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postShipmentsAsyncWithHttpInfo($user_agent, $shipment_post_shipments_request_v11, $format = null, $positions = null, string $contentType = self::contentTypes['postShipments'][0])
    {
        $returnType = '\MyParcel\CoreApi\Generated\Capabilities\Model\ShipmentResponsesShipmentIds';
        $request = $this->postShipmentsRequest($user_agent, $shipment_post_shipments_request_v11, $format, $positions, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postShipments'
     *
     * @param  string $user_agent To give us insight into where requests come from and API documentation usage, you should send a &#x60;User-Agent&#x60; header with all your requests. This header should include information about your integration, the CMS/platform and the backend you are using. (required)
     * @param  \MyParcel\CoreApi\Generated\Capabilities\Model\ShipmentPostShipmentsRequestV11 $shipment_post_shipments_request_v11 Array of Shipment objects. (required)
     * @param  \MyParcel\CoreApi\Generated\Capabilities\Model\ShipmentParametersPaperSize|null $format The size of a paper as specified in ISO216. (optional)
     * @param  \MyParcel\CoreApi\Generated\Capabilities\Model\ShipmentParametersLabelPosition|null $positions The position of the label on an A4 sheet. You can specify multiple positions by semicolon separating them on the URI. Positioning is only applied on the first page with labels. All subsequent pages will use the default positioning 1,2,3,4. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postShipments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postShipmentsRequest($user_agent, $shipment_post_shipments_request_v11, $format = null, $positions = null, string $contentType = self::contentTypes['postShipments'][0])
    {

        // verify the required parameter 'user_agent' is set
        if ($user_agent === null || (is_array($user_agent) && count($user_agent) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_agent when calling postShipments'
            );
        }

        // verify the required parameter 'shipment_post_shipments_request_v11' is set
        if ($shipment_post_shipments_request_v11 === null || (is_array($shipment_post_shipments_request_v11) && count($shipment_post_shipments_request_v11) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipment_post_shipments_request_v11 when calling postShipments'
            );
        }




        $resourcePath = '/shipments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $format,
            'format', // param base name
            'ShipmentParametersPaperSize', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $positions,
            'positions', // param base name
            'anyOf&lt;_ref_shipment_label_printing_position,shipment_parameters_label_position_anyOf,string&gt;', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($user_agent !== null) {
            $headerParams['User-Agent'] = ObjectSerializer::toHeaderValue($user_agent);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/vnd.shipment_label+json', 'application/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($shipment_post_shipments_request_v11)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($shipment_post_shipments_request_v11));
            } else {
                $httpBody = $shipment_post_shipments_request_v11;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putShipment
     *
     * Update Shipment
     *
     * @param  string $user_agent To give us insight into where requests come from and API documentation usage, you should send a &#x60;User-Agent&#x60; header with all your requests. This header should include information about your integration, the CMS/platform and the backend you are using. (required)
     * @param  \MyParcel\CoreApi\Generated\Capabilities\Model\ShipmentPutShipmentsRequestV11 $shipment_put_shipments_request_v11 Array of Shipment objects. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putShipment'] to see the possible values for this operation
     *
     * @throws \MyParcel\CoreApi\Generated\Capabilities\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function putShipment($user_agent, $shipment_put_shipments_request_v11, string $contentType = self::contentTypes['putShipment'][0])
    {
        $this->putShipmentWithHttpInfo($user_agent, $shipment_put_shipments_request_v11, $contentType);
    }

    /**
     * Operation putShipmentWithHttpInfo
     *
     * Update Shipment
     *
     * @param  string $user_agent To give us insight into where requests come from and API documentation usage, you should send a &#x60;User-Agent&#x60; header with all your requests. This header should include information about your integration, the CMS/platform and the backend you are using. (required)
     * @param  \MyParcel\CoreApi\Generated\Capabilities\Model\ShipmentPutShipmentsRequestV11 $shipment_put_shipments_request_v11 Array of Shipment objects. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putShipment'] to see the possible values for this operation
     *
     * @throws \MyParcel\CoreApi\Generated\Capabilities\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function putShipmentWithHttpInfo($user_agent, $shipment_put_shipments_request_v11, string $contentType = self::contentTypes['putShipment'][0])
    {
        $request = $this->putShipmentRequest($user_agent, $shipment_put_shipments_request_v11, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MyParcel\CoreApi\Generated\Capabilities\Model\CommonResponsesUserErrorInvalidContentType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                
                
            }
        
            if ($this->responseWithinRangeCode('4XX', $e->getCode())) {
                $data = ObjectSerializer::deserialize(
                    $e->getResponseBody(),
                    '\MyParcel\CoreApi\Generated\Capabilities\Model\CommonResponsesUserError',
                    $e->getResponseHeaders()
                );
                $e->setResponseObject($data);
                throw $e;
            }
            if ($this->responseWithinRangeCode('5XX', $e->getCode())) {
                $data = ObjectSerializer::deserialize(
                    $e->getResponseBody(),
                    '\MyParcel\CoreApi\Generated\Capabilities\Model\CommonResponsesSystemError',
                    $e->getResponseHeaders()
                );
                $e->setResponseObject($data);
                throw $e;
            }

            throw $e;
        }
    }

    /**
     * Operation putShipmentAsync
     *
     * Update Shipment
     *
     * @param  string $user_agent To give us insight into where requests come from and API documentation usage, you should send a &#x60;User-Agent&#x60; header with all your requests. This header should include information about your integration, the CMS/platform and the backend you are using. (required)
     * @param  \MyParcel\CoreApi\Generated\Capabilities\Model\ShipmentPutShipmentsRequestV11 $shipment_put_shipments_request_v11 Array of Shipment objects. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putShipment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putShipmentAsync($user_agent, $shipment_put_shipments_request_v11, string $contentType = self::contentTypes['putShipment'][0])
    {
        return $this->putShipmentAsyncWithHttpInfo($user_agent, $shipment_put_shipments_request_v11, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putShipmentAsyncWithHttpInfo
     *
     * Update Shipment
     *
     * @param  string $user_agent To give us insight into where requests come from and API documentation usage, you should send a &#x60;User-Agent&#x60; header with all your requests. This header should include information about your integration, the CMS/platform and the backend you are using. (required)
     * @param  \MyParcel\CoreApi\Generated\Capabilities\Model\ShipmentPutShipmentsRequestV11 $shipment_put_shipments_request_v11 Array of Shipment objects. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putShipment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putShipmentAsyncWithHttpInfo($user_agent, $shipment_put_shipments_request_v11, string $contentType = self::contentTypes['putShipment'][0])
    {
        $returnType = '';
        $request = $this->putShipmentRequest($user_agent, $shipment_put_shipments_request_v11, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putShipment'
     *
     * @param  string $user_agent To give us insight into where requests come from and API documentation usage, you should send a &#x60;User-Agent&#x60; header with all your requests. This header should include information about your integration, the CMS/platform and the backend you are using. (required)
     * @param  \MyParcel\CoreApi\Generated\Capabilities\Model\ShipmentPutShipmentsRequestV11 $shipment_put_shipments_request_v11 Array of Shipment objects. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putShipment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function putShipmentRequest($user_agent, $shipment_put_shipments_request_v11, string $contentType = self::contentTypes['putShipment'][0])
    {

        // verify the required parameter 'user_agent' is set
        if ($user_agent === null || (is_array($user_agent) && count($user_agent) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_agent when calling putShipment'
            );
        }

        // verify the required parameter 'shipment_put_shipments_request_v11' is set
        if ($shipment_put_shipments_request_v11 === null || (is_array($shipment_put_shipments_request_v11) && count($shipment_put_shipments_request_v11) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipment_put_shipments_request_v11 when calling putShipment'
            );
        }


        $resourcePath = '/shipments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($user_agent !== null) {
            $headerParams['User-Agent'] = ObjectSerializer::toHeaderValue($user_agent);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/*', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($shipment_put_shipments_request_v11)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($shipment_put_shipments_request_v11));
            } else {
                $httpBody = $shipment_put_shipments_request_v11;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
